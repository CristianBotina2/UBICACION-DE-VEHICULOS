
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000180 <Reset_Handler>:
 8000180:	b672      	cpsid	i
 8000182:	4825      	ldr	r0, [pc, #148]	; (8000218 <endfiniloop+0x4>)
 8000184:	f380 8809 	msr	PSP, r0
 8000188:	4824      	ldr	r0, [pc, #144]	; (800021c <endfiniloop+0x8>)
 800018a:	f64e 5108 	movw	r1, #60680	; 0xed08
 800018e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000192:	6008      	str	r0, [r1, #0]
 8000194:	2002      	movs	r0, #2
 8000196:	f380 8814 	msr	CONTROL, r0
 800019a:	f3bf 8f6f 	isb	sy
 800019e:	f001 fcaf 	bl	8001b00 <__core_init>
 80001a2:	f001 fbfd 	bl	80019a0 <__early_init>
 80001a6:	481e      	ldr	r0, [pc, #120]	; (8000220 <endfiniloop+0xc>)
 80001a8:	491e      	ldr	r1, [pc, #120]	; (8000224 <endfiniloop+0x10>)
 80001aa:	4a1f      	ldr	r2, [pc, #124]	; (8000228 <endfiniloop+0x14>)

080001ac <msloop>:
 80001ac:	4291      	cmp	r1, r2
 80001ae:	bf3c      	itt	cc
 80001b0:	f841 0b04 	strcc.w	r0, [r1], #4
 80001b4:	e7fa      	bcc.n	80001ac <msloop>
 80001b6:	491d      	ldr	r1, [pc, #116]	; (800022c <endfiniloop+0x18>)
 80001b8:	4a17      	ldr	r2, [pc, #92]	; (8000218 <endfiniloop+0x4>)

080001ba <psloop>:
 80001ba:	4291      	cmp	r1, r2
 80001bc:	bf3c      	itt	cc
 80001be:	f841 0b04 	strcc.w	r0, [r1], #4
 80001c2:	e7fa      	bcc.n	80001ba <psloop>
 80001c4:	491a      	ldr	r1, [pc, #104]	; (8000230 <endfiniloop+0x1c>)
 80001c6:	4a1b      	ldr	r2, [pc, #108]	; (8000234 <endfiniloop+0x20>)
 80001c8:	4b1b      	ldr	r3, [pc, #108]	; (8000238 <endfiniloop+0x24>)

080001ca <dloop>:
 80001ca:	429a      	cmp	r2, r3
 80001cc:	bf3e      	ittt	cc
 80001ce:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001d2:	f842 0b04 	strcc.w	r0, [r2], #4
 80001d6:	e7f8      	bcc.n	80001ca <dloop>
 80001d8:	2000      	movs	r0, #0
 80001da:	4918      	ldr	r1, [pc, #96]	; (800023c <endfiniloop+0x28>)
 80001dc:	4a18      	ldr	r2, [pc, #96]	; (8000240 <endfiniloop+0x2c>)

080001de <bloop>:
 80001de:	4291      	cmp	r1, r2
 80001e0:	bf3c      	itt	cc
 80001e2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e6:	e7fa      	bcc.n	80001de <bloop>
 80001e8:	f001 fc4a 	bl	8001a80 <__init_ram_areas>
 80001ec:	f001 fc80 	bl	8001af0 <__late_init>
 80001f0:	4c14      	ldr	r4, [pc, #80]	; (8000244 <endfiniloop+0x30>)
 80001f2:	4d15      	ldr	r5, [pc, #84]	; (8000248 <endfiniloop+0x34>)

080001f4 <initloop>:
 80001f4:	42ac      	cmp	r4, r5
 80001f6:	da03      	bge.n	8000200 <endinitloop>
 80001f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80001fc:	4788      	blx	r1
 80001fe:	e7f9      	b.n	80001f4 <initloop>

08000200 <endinitloop>:
 8000200:	f002 f97e 	bl	8002500 <main>
 8000204:	4c11      	ldr	r4, [pc, #68]	; (800024c <endfiniloop+0x38>)
 8000206:	4d12      	ldr	r5, [pc, #72]	; (8000250 <endfiniloop+0x3c>)

08000208 <finiloop>:
 8000208:	42ac      	cmp	r4, r5
 800020a:	da03      	bge.n	8000214 <endfiniloop>
 800020c:	f854 1b04 	ldr.w	r1, [r4], #4
 8000210:	4788      	blx	r1
 8000212:	e7f9      	b.n	8000208 <finiloop>

08000214 <endfiniloop>:
 8000214:	f001 bc64 	b.w	8001ae0 <__default_exit>
 8000218:	20000800 	.word	0x20000800
 800021c:	08000000 	.word	0x08000000
 8000220:	55555555 	.word	0x55555555
 8000224:	20000000 	.word	0x20000000
 8000228:	20000400 	.word	0x20000400
 800022c:	20000400 	.word	0x20000400
 8000230:	08003170 	.word	0x08003170
 8000234:	20000800 	.word	0x20000800
 8000238:	20000800 	.word	0x20000800
 800023c:	20000800 	.word	0x20000800
 8000240:	200013b0 	.word	0x200013b0
 8000244:	08000180 	.word	0x08000180
 8000248:	08000180 	.word	0x08000180
 800024c:	08000180 	.word	0x08000180
 8000250:	08000180 	.word	0x08000180

08000254 <_port_switch>:
 8000254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000258:	f8c1 d00c 	str.w	sp, [r1, #12]
 800025c:	68c3      	ldr	r3, [r0, #12]
 800025e:	469d      	mov	sp, r3
 8000260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000264 <_port_thread_start>:
 8000264:	2300      	movs	r3, #0
 8000266:	f383 8811 	msr	BASEPRI, r3
 800026a:	4628      	mov	r0, r5
 800026c:	47a0      	blx	r4
 800026e:	2000      	movs	r0, #0
 8000270:	f001 ffde 	bl	8002230 <chThdExit>

08000274 <_port_switch_from_isr>:
 8000274:	f001 fbe4 	bl	8001a40 <chSchDoReschedule>

08000278 <_port_exit_from_isr>:
 8000278:	df00      	svc	0
 800027a:	e7fe      	b.n	800027a <_port_exit_from_isr+0x2>

0800027c <__aeabi_drsub>:
 800027c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000280:	e002      	b.n	8000288 <__adddf3>
 8000282:	bf00      	nop

08000284 <__aeabi_dsub>:
 8000284:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000288 <__adddf3>:
 8000288:	b530      	push	{r4, r5, lr}
 800028a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000292:	ea94 0f05 	teq	r4, r5
 8000296:	bf08      	it	eq
 8000298:	ea90 0f02 	teqeq	r0, r2
 800029c:	bf1f      	itttt	ne
 800029e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ae:	f000 80e2 	beq.w	8000476 <__adddf3+0x1ee>
 80002b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ba:	bfb8      	it	lt
 80002bc:	426d      	neglt	r5, r5
 80002be:	dd0c      	ble.n	80002da <__adddf3+0x52>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea80 0202 	eor.w	r2, r0, r2
 80002c6:	ea81 0303 	eor.w	r3, r1, r3
 80002ca:	ea82 0000 	eor.w	r0, r2, r0
 80002ce:	ea83 0101 	eor.w	r1, r3, r1
 80002d2:	ea80 0202 	eor.w	r2, r0, r2
 80002d6:	ea81 0303 	eor.w	r3, r1, r3
 80002da:	2d36      	cmp	r5, #54	; 0x36
 80002dc:	bf88      	it	hi
 80002de:	bd30      	pophi	{r4, r5, pc}
 80002e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f0:	d002      	beq.n	80002f8 <__adddf3+0x70>
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000300:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x84>
 8000306:	4252      	negs	r2, r2
 8000308:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030c:	ea94 0f05 	teq	r4, r5
 8000310:	f000 80a7 	beq.w	8000462 <__adddf3+0x1da>
 8000314:	f1a4 0401 	sub.w	r4, r4, #1
 8000318:	f1d5 0e20 	rsbs	lr, r5, #32
 800031c:	db0d      	blt.n	800033a <__adddf3+0xb2>
 800031e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000322:	fa22 f205 	lsr.w	r2, r2, r5
 8000326:	1880      	adds	r0, r0, r2
 8000328:	f141 0100 	adc.w	r1, r1, #0
 800032c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000330:	1880      	adds	r0, r0, r2
 8000332:	fa43 f305 	asr.w	r3, r3, r5
 8000336:	4159      	adcs	r1, r3
 8000338:	e00e      	b.n	8000358 <__adddf3+0xd0>
 800033a:	f1a5 0520 	sub.w	r5, r5, #32
 800033e:	f10e 0e20 	add.w	lr, lr, #32
 8000342:	2a01      	cmp	r2, #1
 8000344:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000348:	bf28      	it	cs
 800034a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034e:	fa43 f305 	asr.w	r3, r3, r5
 8000352:	18c0      	adds	r0, r0, r3
 8000354:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800035c:	d507      	bpl.n	800036e <__adddf3+0xe6>
 800035e:	f04f 0e00 	mov.w	lr, #0
 8000362:	f1dc 0c00 	rsbs	ip, ip, #0
 8000366:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036a:	eb6e 0101 	sbc.w	r1, lr, r1
 800036e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000372:	d31b      	bcc.n	80003ac <__adddf3+0x124>
 8000374:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000378:	d30c      	bcc.n	8000394 <__adddf3+0x10c>
 800037a:	0849      	lsrs	r1, r1, #1
 800037c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000380:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000384:	f104 0401 	add.w	r4, r4, #1
 8000388:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800038c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000390:	f080 809a 	bcs.w	80004c8 <__adddf3+0x240>
 8000394:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000398:	bf08      	it	eq
 800039a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039e:	f150 0000 	adcs.w	r0, r0, #0
 80003a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a6:	ea41 0105 	orr.w	r1, r1, r5
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b0:	4140      	adcs	r0, r0
 80003b2:	eb41 0101 	adc.w	r1, r1, r1
 80003b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ba:	f1a4 0401 	sub.w	r4, r4, #1
 80003be:	d1e9      	bne.n	8000394 <__adddf3+0x10c>
 80003c0:	f091 0f00 	teq	r1, #0
 80003c4:	bf04      	itt	eq
 80003c6:	4601      	moveq	r1, r0
 80003c8:	2000      	moveq	r0, #0
 80003ca:	fab1 f381 	clz	r3, r1
 80003ce:	bf08      	it	eq
 80003d0:	3320      	addeq	r3, #32
 80003d2:	f1a3 030b 	sub.w	r3, r3, #11
 80003d6:	f1b3 0220 	subs.w	r2, r3, #32
 80003da:	da0c      	bge.n	80003f6 <__adddf3+0x16e>
 80003dc:	320c      	adds	r2, #12
 80003de:	dd08      	ble.n	80003f2 <__adddf3+0x16a>
 80003e0:	f102 0c14 	add.w	ip, r2, #20
 80003e4:	f1c2 020c 	rsb	r2, r2, #12
 80003e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003ec:	fa21 f102 	lsr.w	r1, r1, r2
 80003f0:	e00c      	b.n	800040c <__adddf3+0x184>
 80003f2:	f102 0214 	add.w	r2, r2, #20
 80003f6:	bfd8      	it	le
 80003f8:	f1c2 0c20 	rsble	ip, r2, #32
 80003fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000400:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000404:	bfdc      	itt	le
 8000406:	ea41 010c 	orrle.w	r1, r1, ip
 800040a:	4090      	lslle	r0, r2
 800040c:	1ae4      	subs	r4, r4, r3
 800040e:	bfa2      	ittt	ge
 8000410:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000414:	4329      	orrge	r1, r5
 8000416:	bd30      	popge	{r4, r5, pc}
 8000418:	ea6f 0404 	mvn.w	r4, r4
 800041c:	3c1f      	subs	r4, #31
 800041e:	da1c      	bge.n	800045a <__adddf3+0x1d2>
 8000420:	340c      	adds	r4, #12
 8000422:	dc0e      	bgt.n	8000442 <__adddf3+0x1ba>
 8000424:	f104 0414 	add.w	r4, r4, #20
 8000428:	f1c4 0220 	rsb	r2, r4, #32
 800042c:	fa20 f004 	lsr.w	r0, r0, r4
 8000430:	fa01 f302 	lsl.w	r3, r1, r2
 8000434:	ea40 0003 	orr.w	r0, r0, r3
 8000438:	fa21 f304 	lsr.w	r3, r1, r4
 800043c:	ea45 0103 	orr.w	r1, r5, r3
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	f1c4 040c 	rsb	r4, r4, #12
 8000446:	f1c4 0220 	rsb	r2, r4, #32
 800044a:	fa20 f002 	lsr.w	r0, r0, r2
 800044e:	fa01 f304 	lsl.w	r3, r1, r4
 8000452:	ea40 0003 	orr.w	r0, r0, r3
 8000456:	4629      	mov	r1, r5
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	fa21 f004 	lsr.w	r0, r1, r4
 800045e:	4629      	mov	r1, r5
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f094 0f00 	teq	r4, #0
 8000466:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046a:	bf06      	itte	eq
 800046c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000470:	3401      	addeq	r4, #1
 8000472:	3d01      	subne	r5, #1
 8000474:	e74e      	b.n	8000314 <__adddf3+0x8c>
 8000476:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047a:	bf18      	it	ne
 800047c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000480:	d029      	beq.n	80004d6 <__adddf3+0x24e>
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	d005      	beq.n	800049a <__adddf3+0x212>
 800048e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000492:	bf04      	itt	eq
 8000494:	4619      	moveq	r1, r3
 8000496:	4610      	moveq	r0, r2
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea91 0f03 	teq	r1, r3
 800049e:	bf1e      	ittt	ne
 80004a0:	2100      	movne	r1, #0
 80004a2:	2000      	movne	r0, #0
 80004a4:	bd30      	popne	{r4, r5, pc}
 80004a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004aa:	d105      	bne.n	80004b8 <__adddf3+0x230>
 80004ac:	0040      	lsls	r0, r0, #1
 80004ae:	4149      	adcs	r1, r1
 80004b0:	bf28      	it	cs
 80004b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004b6:	bd30      	pop	{r4, r5, pc}
 80004b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004bc:	bf3c      	itt	cc
 80004be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c2:	bd30      	popcc	{r4, r5, pc}
 80004c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf1a      	itte	ne
 80004dc:	4619      	movne	r1, r3
 80004de:	4610      	movne	r0, r2
 80004e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e4:	bf1c      	itt	ne
 80004e6:	460b      	movne	r3, r1
 80004e8:	4602      	movne	r2, r0
 80004ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ee:	bf06      	itte	eq
 80004f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f4:	ea91 0f03 	teqeq	r1, r3
 80004f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	bf00      	nop

08000500 <__aeabi_ui2d>:
 8000500:	f090 0f00 	teq	r0, #0
 8000504:	bf04      	itt	eq
 8000506:	2100      	moveq	r1, #0
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000510:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000514:	f04f 0500 	mov.w	r5, #0
 8000518:	f04f 0100 	mov.w	r1, #0
 800051c:	e750      	b.n	80003c0 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_i2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000534:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000538:	bf48      	it	mi
 800053a:	4240      	negmi	r0, r0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e73e      	b.n	80003c0 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_f2d>:
 8000544:	0042      	lsls	r2, r0, #1
 8000546:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054a:	ea4f 0131 	mov.w	r1, r1, rrx
 800054e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000552:	bf1f      	itttt	ne
 8000554:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000558:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800055c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000560:	4770      	bxne	lr
 8000562:	f092 0f00 	teq	r2, #0
 8000566:	bf14      	ite	ne
 8000568:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000574:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000578:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800057c:	e720      	b.n	80003c0 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_ul2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	e00a      	b.n	80005a6 <__aeabi_l2d+0x16>

08000590 <__aeabi_l2d>:
 8000590:	ea50 0201 	orrs.w	r2, r0, r1
 8000594:	bf08      	it	eq
 8000596:	4770      	bxeq	lr
 8000598:	b530      	push	{r4, r5, lr}
 800059a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059e:	d502      	bpl.n	80005a6 <__aeabi_l2d+0x16>
 80005a0:	4240      	negs	r0, r0
 80005a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b2:	f43f aedc 	beq.w	800036e <__adddf3+0xe6>
 80005b6:	f04f 0203 	mov.w	r2, #3
 80005ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005be:	bf18      	it	ne
 80005c0:	3203      	addne	r2, #3
 80005c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c6:	bf18      	it	ne
 80005c8:	3203      	addne	r2, #3
 80005ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	fa01 fe03 	lsl.w	lr, r1, r3
 80005de:	ea40 000e 	orr.w	r0, r0, lr
 80005e2:	fa21 f102 	lsr.w	r1, r1, r2
 80005e6:	4414      	add	r4, r2
 80005e8:	e6c1      	b.n	800036e <__adddf3+0xe6>
 80005ea:	bf00      	nop

080005ec <__aeabi_dmul>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fa:	bf1d      	ittte	ne
 80005fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000600:	ea94 0f0c 	teqne	r4, ip
 8000604:	ea95 0f0c 	teqne	r5, ip
 8000608:	f000 f8de 	bleq	80007c8 <__aeabi_dmul+0x1dc>
 800060c:	442c      	add	r4, r5
 800060e:	ea81 0603 	eor.w	r6, r1, r3
 8000612:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000616:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061e:	bf18      	it	ne
 8000620:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800062c:	d038      	beq.n	80006a0 <__aeabi_dmul+0xb4>
 800062e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000632:	f04f 0500 	mov.w	r5, #0
 8000636:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000642:	f04f 0600 	mov.w	r6, #0
 8000646:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064a:	f09c 0f00 	teq	ip, #0
 800064e:	bf18      	it	ne
 8000650:	f04e 0e01 	orrne.w	lr, lr, #1
 8000654:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000658:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800065c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000660:	d204      	bcs.n	800066c <__aeabi_dmul+0x80>
 8000662:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000666:	416d      	adcs	r5, r5
 8000668:	eb46 0606 	adc.w	r6, r6, r6
 800066c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000670:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000674:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000678:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800067c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000680:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000684:	bf88      	it	hi
 8000686:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068a:	d81e      	bhi.n	80006ca <__aeabi_dmul+0xde>
 800068c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000690:	bf08      	it	eq
 8000692:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000696:	f150 0000 	adcs.w	r0, r0, #0
 800069a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a4:	ea46 0101 	orr.w	r1, r6, r1
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	ea81 0103 	eor.w	r1, r1, r3
 80006b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b4:	bfc2      	ittt	gt
 80006b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006be:	bd70      	popgt	{r4, r5, r6, pc}
 80006c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c4:	f04f 0e00 	mov.w	lr, #0
 80006c8:	3c01      	subs	r4, #1
 80006ca:	f300 80ab 	bgt.w	8000824 <__aeabi_dmul+0x238>
 80006ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d2:	bfde      	ittt	le
 80006d4:	2000      	movle	r0, #0
 80006d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006da:	bd70      	pople	{r4, r5, r6, pc}
 80006dc:	f1c4 0400 	rsb	r4, r4, #0
 80006e0:	3c20      	subs	r4, #32
 80006e2:	da35      	bge.n	8000750 <__aeabi_dmul+0x164>
 80006e4:	340c      	adds	r4, #12
 80006e6:	dc1b      	bgt.n	8000720 <__aeabi_dmul+0x134>
 80006e8:	f104 0414 	add.w	r4, r4, #20
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f305 	lsl.w	r3, r0, r5
 80006f4:	fa20 f004 	lsr.w	r0, r0, r4
 80006f8:	fa01 f205 	lsl.w	r2, r1, r5
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	fa21 f604 	lsr.w	r6, r1, r4
 8000710:	eb42 0106 	adc.w	r1, r2, r6
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 040c 	rsb	r4, r4, #12
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f304 	lsl.w	r3, r0, r4
 800072c:	fa20 f005 	lsr.w	r0, r0, r5
 8000730:	fa01 f204 	lsl.w	r2, r1, r4
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	f141 0100 	adc.w	r1, r1, #0
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f205 	lsl.w	r2, r0, r5
 8000758:	ea4e 0e02 	orr.w	lr, lr, r2
 800075c:	fa20 f304 	lsr.w	r3, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea43 0302 	orr.w	r3, r3, r2
 8000768:	fa21 f004 	lsr.w	r0, r1, r4
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	fa21 f204 	lsr.w	r2, r1, r4
 8000774:	ea20 0002 	bic.w	r0, r0, r2
 8000778:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f094 0f00 	teq	r4, #0
 800078c:	d10f      	bne.n	80007ae <__aeabi_dmul+0x1c2>
 800078e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000792:	0040      	lsls	r0, r0, #1
 8000794:	eb41 0101 	adc.w	r1, r1, r1
 8000798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3c01      	subeq	r4, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1a6>
 80007a2:	ea41 0106 	orr.w	r1, r1, r6
 80007a6:	f095 0f00 	teq	r5, #0
 80007aa:	bf18      	it	ne
 80007ac:	4770      	bxne	lr
 80007ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	eb43 0303 	adc.w	r3, r3, r3
 80007b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3d01      	subeq	r5, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1c6>
 80007c2:	ea43 0306 	orr.w	r3, r3, r6
 80007c6:	4770      	bx	lr
 80007c8:	ea94 0f0c 	teq	r4, ip
 80007cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d0:	bf18      	it	ne
 80007d2:	ea95 0f0c 	teqne	r5, ip
 80007d6:	d00c      	beq.n	80007f2 <__aeabi_dmul+0x206>
 80007d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e2:	d1d1      	bne.n	8000788 <__aeabi_dmul+0x19c>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f6:	bf06      	itte	eq
 80007f8:	4610      	moveq	r0, r2
 80007fa:	4619      	moveq	r1, r3
 80007fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000800:	d019      	beq.n	8000836 <__aeabi_dmul+0x24a>
 8000802:	ea94 0f0c 	teq	r4, ip
 8000806:	d102      	bne.n	800080e <__aeabi_dmul+0x222>
 8000808:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800080c:	d113      	bne.n	8000836 <__aeabi_dmul+0x24a>
 800080e:	ea95 0f0c 	teq	r5, ip
 8000812:	d105      	bne.n	8000820 <__aeabi_dmul+0x234>
 8000814:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000818:	bf1c      	itt	ne
 800081a:	4610      	movne	r0, r2
 800081c:	4619      	movne	r1, r3
 800081e:	d10a      	bne.n	8000836 <__aeabi_dmul+0x24a>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083e:	bd70      	pop	{r4, r5, r6, pc}

08000840 <__aeabi_ddiv>:
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000846:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084e:	bf1d      	ittte	ne
 8000850:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000854:	ea94 0f0c 	teqne	r4, ip
 8000858:	ea95 0f0c 	teqne	r5, ip
 800085c:	f000 f8a7 	bleq	80009ae <__aeabi_ddiv+0x16e>
 8000860:	eba4 0405 	sub.w	r4, r4, r5
 8000864:	ea81 0e03 	eor.w	lr, r1, r3
 8000868:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800086c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000870:	f000 8088 	beq.w	8000984 <__aeabi_ddiv+0x144>
 8000874:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000878:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800087c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000880:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000884:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000888:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800088c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000890:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000894:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000898:	429d      	cmp	r5, r3
 800089a:	bf08      	it	eq
 800089c:	4296      	cmpeq	r6, r2
 800089e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a6:	d202      	bcs.n	80008ae <__aeabi_ddiv+0x6e>
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	1ab6      	subs	r6, r6, r2
 80008b0:	eb65 0503 	sbc.w	r5, r5, r3
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800091c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000920:	d018      	beq.n	8000954 <__aeabi_ddiv+0x114>
 8000922:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000926:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000932:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000936:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093e:	d1c0      	bne.n	80008c2 <__aeabi_ddiv+0x82>
 8000940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000944:	d10b      	bne.n	800095e <__aeabi_ddiv+0x11e>
 8000946:	ea41 0100 	orr.w	r1, r1, r0
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000952:	e7b6      	b.n	80008c2 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	bf04      	itt	eq
 800095a:	4301      	orreq	r1, r0
 800095c:	2000      	moveq	r0, #0
 800095e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000962:	bf88      	it	hi
 8000964:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000968:	f63f aeaf 	bhi.w	80006ca <__aeabi_dmul+0xde>
 800096c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000970:	bf04      	itt	eq
 8000972:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000976:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097a:	f150 0000 	adcs.w	r0, r0, #0
 800097e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000988:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800098c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000990:	bfc2      	ittt	gt
 8000992:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099a:	bd70      	popgt	{r4, r5, r6, pc}
 800099c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a0:	f04f 0e00 	mov.w	lr, #0
 80009a4:	3c01      	subs	r4, #1
 80009a6:	e690      	b.n	80006ca <__aeabi_dmul+0xde>
 80009a8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ac:	e68d      	b.n	80006ca <__aeabi_dmul+0xde>
 80009ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b2:	ea94 0f0c 	teq	r4, ip
 80009b6:	bf08      	it	eq
 80009b8:	ea95 0f0c 	teqeq	r5, ip
 80009bc:	f43f af3b 	beq.w	8000836 <__aeabi_dmul+0x24a>
 80009c0:	ea94 0f0c 	teq	r4, ip
 80009c4:	d10a      	bne.n	80009dc <__aeabi_ddiv+0x19c>
 80009c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ca:	f47f af34 	bne.w	8000836 <__aeabi_dmul+0x24a>
 80009ce:	ea95 0f0c 	teq	r5, ip
 80009d2:	f47f af25 	bne.w	8000820 <__aeabi_dmul+0x234>
 80009d6:	4610      	mov	r0, r2
 80009d8:	4619      	mov	r1, r3
 80009da:	e72c      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009dc:	ea95 0f0c 	teq	r5, ip
 80009e0:	d106      	bne.n	80009f0 <__aeabi_ddiv+0x1b0>
 80009e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e6:	f43f aefd 	beq.w	80007e4 <__aeabi_dmul+0x1f8>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e722      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fa:	f47f aec5 	bne.w	8000788 <__aeabi_dmul+0x19c>
 80009fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a02:	f47f af0d 	bne.w	8000820 <__aeabi_dmul+0x234>
 8000a06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0a:	f47f aeeb 	bne.w	80007e4 <__aeabi_dmul+0x1f8>
 8000a0e:	e712      	b.n	8000836 <__aeabi_dmul+0x24a>

08000a10 <__aeabi_d2iz>:
 8000a10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a18:	d215      	bcs.n	8000a46 <__aeabi_d2iz+0x36>
 8000a1a:	d511      	bpl.n	8000a40 <__aeabi_d2iz+0x30>
 8000a1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a24:	d912      	bls.n	8000a4c <__aeabi_d2iz+0x3c>
 8000a26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a36:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3a:	bf18      	it	ne
 8000a3c:	4240      	negne	r0, r0
 8000a3e:	4770      	bx	lr
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_d2iz+0x48>
 8000a4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	bf08      	it	eq
 8000a52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_d2f>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a68:	bf24      	itt	cs
 8000a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_d2f+0x30>
 8000a74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a94:	d121      	bne.n	8000ada <__aeabi_d2f+0x7a>
 8000a96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a9a:	bfbc      	itt	lt
 8000a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	4770      	bxlt	lr
 8000aa2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aaa:	f1c2 0218 	rsb	r2, r2, #24
 8000aae:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aba:	bf18      	it	ne
 8000abc:	f040 0001 	orrne.w	r0, r0, #1
 8000ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000acc:	ea40 000c 	orr.w	r0, r0, ip
 8000ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad8:	e7cc      	b.n	8000a74 <__aeabi_d2f+0x14>
 8000ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ade:	d107      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aee:	4770      	bxne	lr
 8000af0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_frsub>:
 8000b00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b04:	e002      	b.n	8000b0c <__addsf3>
 8000b06:	bf00      	nop

08000b08 <__aeabi_fsub>:
 8000b08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b0c <__addsf3>:
 8000b0c:	0042      	lsls	r2, r0, #1
 8000b0e:	bf1f      	itttt	ne
 8000b10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b14:	ea92 0f03 	teqne	r2, r3
 8000b18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b20:	d06a      	beq.n	8000bf8 <__addsf3+0xec>
 8000b22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b2a:	bfc1      	itttt	gt
 8000b2c:	18d2      	addgt	r2, r2, r3
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	4048      	eorgt	r0, r1
 8000b32:	4041      	eorgt	r1, r0
 8000b34:	bfb8      	it	lt
 8000b36:	425b      	neglt	r3, r3
 8000b38:	2b19      	cmp	r3, #25
 8000b3a:	bf88      	it	hi
 8000b3c:	4770      	bxhi	lr
 8000b3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b5a:	bf18      	it	ne
 8000b5c:	4249      	negne	r1, r1
 8000b5e:	ea92 0f03 	teq	r2, r3
 8000b62:	d03f      	beq.n	8000be4 <__addsf3+0xd8>
 8000b64:	f1a2 0201 	sub.w	r2, r2, #1
 8000b68:	fa41 fc03 	asr.w	ip, r1, r3
 8000b6c:	eb10 000c 	adds.w	r0, r0, ip
 8000b70:	f1c3 0320 	rsb	r3, r3, #32
 8000b74:	fa01 f103 	lsl.w	r1, r1, r3
 8000b78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b7c:	d502      	bpl.n	8000b84 <__addsf3+0x78>
 8000b7e:	4249      	negs	r1, r1
 8000b80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b88:	d313      	bcc.n	8000bb2 <__addsf3+0xa6>
 8000b8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8e:	d306      	bcc.n	8000b9e <__addsf3+0x92>
 8000b90:	0840      	lsrs	r0, r0, #1
 8000b92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b96:	f102 0201 	add.w	r2, r2, #1
 8000b9a:	2afe      	cmp	r2, #254	; 0xfe
 8000b9c:	d251      	bcs.n	8000c42 <__addsf3+0x136>
 8000b9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	ea40 0003 	orr.w	r0, r0, r3
 8000bb0:	4770      	bx	lr
 8000bb2:	0049      	lsls	r1, r1, #1
 8000bb4:	eb40 0000 	adc.w	r0, r0, r0
 8000bb8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	d1ed      	bne.n	8000b9e <__addsf3+0x92>
 8000bc2:	fab0 fc80 	clz	ip, r0
 8000bc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bca:	ebb2 020c 	subs.w	r2, r2, ip
 8000bce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bd2:	bfaa      	itet	ge
 8000bd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd8:	4252      	neglt	r2, r2
 8000bda:	4318      	orrge	r0, r3
 8000bdc:	bfbc      	itt	lt
 8000bde:	40d0      	lsrlt	r0, r2
 8000be0:	4318      	orrlt	r0, r3
 8000be2:	4770      	bx	lr
 8000be4:	f092 0f00 	teq	r2, #0
 8000be8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bec:	bf06      	itte	eq
 8000bee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bf2:	3201      	addeq	r2, #1
 8000bf4:	3b01      	subne	r3, #1
 8000bf6:	e7b5      	b.n	8000b64 <__addsf3+0x58>
 8000bf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c00:	bf18      	it	ne
 8000c02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c06:	d021      	beq.n	8000c4c <__addsf3+0x140>
 8000c08:	ea92 0f03 	teq	r2, r3
 8000c0c:	d004      	beq.n	8000c18 <__addsf3+0x10c>
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	bf08      	it	eq
 8000c14:	4608      	moveq	r0, r1
 8000c16:	4770      	bx	lr
 8000c18:	ea90 0f01 	teq	r0, r1
 8000c1c:	bf1c      	itt	ne
 8000c1e:	2000      	movne	r0, #0
 8000c20:	4770      	bxne	lr
 8000c22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c26:	d104      	bne.n	8000c32 <__addsf3+0x126>
 8000c28:	0040      	lsls	r0, r0, #1
 8000c2a:	bf28      	it	cs
 8000c2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c30:	4770      	bx	lr
 8000c32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c36:	bf3c      	itt	cc
 8000c38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bxcc	lr
 8000c3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4a:	4770      	bx	lr
 8000c4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c50:	bf16      	itet	ne
 8000c52:	4608      	movne	r0, r1
 8000c54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c58:	4601      	movne	r1, r0
 8000c5a:	0242      	lsls	r2, r0, #9
 8000c5c:	bf06      	itte	eq
 8000c5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c62:	ea90 0f01 	teqeq	r0, r1
 8000c66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c6a:	4770      	bx	lr

08000c6c <__aeabi_ui2f>:
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e004      	b.n	8000c7c <__aeabi_i2f+0x8>
 8000c72:	bf00      	nop

08000c74 <__aeabi_i2f>:
 8000c74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c78:	bf48      	it	mi
 8000c7a:	4240      	negmi	r0, r0
 8000c7c:	ea5f 0c00 	movs.w	ip, r0
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c88:	4601      	mov	r1, r0
 8000c8a:	f04f 0000 	mov.w	r0, #0
 8000c8e:	e01c      	b.n	8000cca <__aeabi_l2f+0x2a>

08000c90 <__aeabi_ul2f>:
 8000c90:	ea50 0201 	orrs.w	r2, r0, r1
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e00a      	b.n	8000cb4 <__aeabi_l2f+0x14>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_l2f>:
 8000ca0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__aeabi_l2f+0x14>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	ea5f 0c01 	movs.w	ip, r1
 8000cb8:	bf02      	ittt	eq
 8000cba:	4684      	moveq	ip, r0
 8000cbc:	4601      	moveq	r1, r0
 8000cbe:	2000      	moveq	r0, #0
 8000cc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc4:	bf08      	it	eq
 8000cc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cce:	fabc f28c 	clz	r2, ip
 8000cd2:	3a08      	subs	r2, #8
 8000cd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd8:	db10      	blt.n	8000cfc <__aeabi_l2f+0x5c>
 8000cda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cde:	4463      	add	r3, ip
 8000ce0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce4:	f1c2 0220 	rsb	r2, r2, #32
 8000ce8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	eb43 0002 	adc.w	r0, r3, r2
 8000cf4:	bf08      	it	eq
 8000cf6:	f020 0001 	biceq.w	r0, r0, #1
 8000cfa:	4770      	bx	lr
 8000cfc:	f102 0220 	add.w	r2, r2, #32
 8000d00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_fmul>:
 8000d1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d24:	bf1e      	ittt	ne
 8000d26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2a:	ea92 0f0c 	teqne	r2, ip
 8000d2e:	ea93 0f0c 	teqne	r3, ip
 8000d32:	d06f      	beq.n	8000e14 <__aeabi_fmul+0xf8>
 8000d34:	441a      	add	r2, r3
 8000d36:	ea80 0c01 	eor.w	ip, r0, r1
 8000d3a:	0240      	lsls	r0, r0, #9
 8000d3c:	bf18      	it	ne
 8000d3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d42:	d01e      	beq.n	8000d82 <__aeabi_fmul+0x66>
 8000d44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d50:	fba0 3101 	umull	r3, r1, r0, r1
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d5c:	bf3e      	ittt	cc
 8000d5e:	0049      	lslcc	r1, r1, #1
 8000d60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d64:	005b      	lslcc	r3, r3, #1
 8000d66:	ea40 0001 	orr.w	r0, r0, r1
 8000d6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6e:	2afd      	cmp	r2, #253	; 0xfd
 8000d70:	d81d      	bhi.n	8000dae <__aeabi_fmul+0x92>
 8000d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7a:	bf08      	it	eq
 8000d7c:	f020 0001 	biceq.w	r0, r0, #1
 8000d80:	4770      	bx	lr
 8000d82:	f090 0f00 	teq	r0, #0
 8000d86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d8a:	bf08      	it	eq
 8000d8c:	0249      	lsleq	r1, r1, #9
 8000d8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d96:	3a7f      	subs	r2, #127	; 0x7f
 8000d98:	bfc2      	ittt	gt
 8000d9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000da2:	4770      	bxgt	lr
 8000da4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	3a01      	subs	r2, #1
 8000dae:	dc5d      	bgt.n	8000e6c <__aeabi_fmul+0x150>
 8000db0:	f112 0f19 	cmn.w	r2, #25
 8000db4:	bfdc      	itt	le
 8000db6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dba:	4770      	bxle	lr
 8000dbc:	f1c2 0200 	rsb	r2, r2, #0
 8000dc0:	0041      	lsls	r1, r0, #1
 8000dc2:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc6:	f1c2 0220 	rsb	r2, r2, #32
 8000dca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dce:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dd2:	f140 0000 	adc.w	r0, r0, #0
 8000dd6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dda:	bf08      	it	eq
 8000ddc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de0:	4770      	bx	lr
 8000de2:	f092 0f00 	teq	r2, #0
 8000de6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0040      	lsleq	r0, r0, #1
 8000dee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000df2:	3a01      	subeq	r2, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fmul+0xce>
 8000df6:	ea40 000c 	orr.w	r0, r0, ip
 8000dfa:	f093 0f00 	teq	r3, #0
 8000dfe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0049      	lsleq	r1, r1, #1
 8000e06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e0a:	3b01      	subeq	r3, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xe6>
 8000e0e:	ea41 010c 	orr.w	r1, r1, ip
 8000e12:	e78f      	b.n	8000d34 <__aeabi_fmul+0x18>
 8000e14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	bf18      	it	ne
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d00a      	beq.n	8000e3a <__aeabi_fmul+0x11e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1d8      	bne.n	8000de2 <__aeabi_fmul+0xc6>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	4770      	bx	lr
 8000e3a:	f090 0f00 	teq	r0, #0
 8000e3e:	bf17      	itett	ne
 8000e40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e44:	4608      	moveq	r0, r1
 8000e46:	f091 0f00 	teqne	r1, #0
 8000e4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4e:	d014      	beq.n	8000e7a <__aeabi_fmul+0x15e>
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d101      	bne.n	8000e5a <__aeabi_fmul+0x13e>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	d10f      	bne.n	8000e7a <__aeabi_fmul+0x15e>
 8000e5a:	ea93 0f0c 	teq	r3, ip
 8000e5e:	d103      	bne.n	8000e68 <__aeabi_fmul+0x14c>
 8000e60:	024b      	lsls	r3, r1, #9
 8000e62:	bf18      	it	ne
 8000e64:	4608      	movne	r0, r1
 8000e66:	d108      	bne.n	8000e7a <__aeabi_fmul+0x15e>
 8000e68:	ea80 0001 	eor.w	r0, r0, r1
 8000e6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e78:	4770      	bx	lr
 8000e7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_fdiv>:
 8000e84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e8c:	bf1e      	ittt	ne
 8000e8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e92:	ea92 0f0c 	teqne	r2, ip
 8000e96:	ea93 0f0c 	teqne	r3, ip
 8000e9a:	d069      	beq.n	8000f70 <__aeabi_fdiv+0xec>
 8000e9c:	eba2 0203 	sub.w	r2, r2, r3
 8000ea0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea4:	0249      	lsls	r1, r1, #9
 8000ea6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eaa:	d037      	beq.n	8000f1c <__aeabi_fdiv+0x98>
 8000eac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	bf38      	it	cc
 8000ec0:	005b      	lslcc	r3, r3, #1
 8000ec2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	bf24      	itt	cs
 8000ece:	1a5b      	subcs	r3, r3, r1
 8000ed0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed8:	bf24      	itt	cs
 8000eda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ede:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ee2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee6:	bf24      	itt	cs
 8000ee8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef4:	bf24      	itt	cs
 8000ef6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000efa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	bf18      	it	ne
 8000f02:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f06:	d1e0      	bne.n	8000eca <__aeabi_fdiv+0x46>
 8000f08:	2afd      	cmp	r2, #253	; 0xfd
 8000f0a:	f63f af50 	bhi.w	8000dae <__aeabi_fmul+0x92>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f14:	bf08      	it	eq
 8000f16:	f020 0001 	biceq.w	r0, r0, #1
 8000f1a:	4770      	bx	lr
 8000f1c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f20:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f24:	327f      	adds	r2, #127	; 0x7f
 8000f26:	bfc2      	ittt	gt
 8000f28:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f2c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f30:	4770      	bxgt	lr
 8000f32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	3a01      	subs	r2, #1
 8000f3c:	e737      	b.n	8000dae <__aeabi_fmul+0x92>
 8000f3e:	f092 0f00 	teq	r2, #0
 8000f42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0040      	lsleq	r0, r0, #1
 8000f4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4e:	3a01      	subeq	r2, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fdiv+0xc2>
 8000f52:	ea40 000c 	orr.w	r0, r0, ip
 8000f56:	f093 0f00 	teq	r3, #0
 8000f5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0049      	lsleq	r1, r1, #1
 8000f62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f66:	3b01      	subeq	r3, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xda>
 8000f6a:	ea41 010c 	orr.w	r1, r1, ip
 8000f6e:	e795      	b.n	8000e9c <__aeabi_fdiv+0x18>
 8000f70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f74:	ea92 0f0c 	teq	r2, ip
 8000f78:	d108      	bne.n	8000f8c <__aeabi_fdiv+0x108>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	f47f af7d 	bne.w	8000e7a <__aeabi_fmul+0x15e>
 8000f80:	ea93 0f0c 	teq	r3, ip
 8000f84:	f47f af70 	bne.w	8000e68 <__aeabi_fmul+0x14c>
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e776      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000f8c:	ea93 0f0c 	teq	r3, ip
 8000f90:	d104      	bne.n	8000f9c <__aeabi_fdiv+0x118>
 8000f92:	024b      	lsls	r3, r1, #9
 8000f94:	f43f af4c 	beq.w	8000e30 <__aeabi_fmul+0x114>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e76e      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000f9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa0:	bf18      	it	ne
 8000fa2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa6:	d1ca      	bne.n	8000f3e <__aeabi_fdiv+0xba>
 8000fa8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fac:	f47f af5c 	bne.w	8000e68 <__aeabi_fmul+0x14c>
 8000fb0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb4:	f47f af3c 	bne.w	8000e30 <__aeabi_fmul+0x114>
 8000fb8:	e75f      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000fba:	bf00      	nop

08000fbc <__gesf2>:
 8000fbc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc0:	e006      	b.n	8000fd0 <__cmpsf2+0x4>
 8000fc2:	bf00      	nop

08000fc4 <__lesf2>:
 8000fc4:	f04f 0c01 	mov.w	ip, #1
 8000fc8:	e002      	b.n	8000fd0 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__cmpsf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe0:	bf18      	it	ne
 8000fe2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fe6:	d011      	beq.n	800100c <__cmpsf2+0x40>
 8000fe8:	b001      	add	sp, #4
 8000fea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fee:	bf18      	it	ne
 8000ff0:	ea90 0f01 	teqne	r0, r1
 8000ff4:	bf58      	it	pl
 8000ff6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ffa:	bf88      	it	hi
 8000ffc:	17c8      	asrhi	r0, r1, #31
 8000ffe:	bf38      	it	cc
 8001000:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001004:	bf18      	it	ne
 8001006:	f040 0001 	orrne.w	r0, r0, #1
 800100a:	4770      	bx	lr
 800100c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001010:	d102      	bne.n	8001018 <__cmpsf2+0x4c>
 8001012:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001016:	d105      	bne.n	8001024 <__cmpsf2+0x58>
 8001018:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800101c:	d1e4      	bne.n	8000fe8 <__cmpsf2+0x1c>
 800101e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001022:	d0e1      	beq.n	8000fe8 <__cmpsf2+0x1c>
 8001024:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__aeabi_cfrcmple>:
 800102c:	4684      	mov	ip, r0
 800102e:	4608      	mov	r0, r1
 8001030:	4661      	mov	r1, ip
 8001032:	e7ff      	b.n	8001034 <__aeabi_cfcmpeq>

08001034 <__aeabi_cfcmpeq>:
 8001034:	b50f      	push	{r0, r1, r2, r3, lr}
 8001036:	f7ff ffc9 	bl	8000fcc <__cmpsf2>
 800103a:	2800      	cmp	r0, #0
 800103c:	bf48      	it	mi
 800103e:	f110 0f00 	cmnmi.w	r0, #0
 8001042:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001044 <__aeabi_fcmpeq>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff fff4 	bl	8001034 <__aeabi_cfcmpeq>
 800104c:	bf0c      	ite	eq
 800104e:	2001      	moveq	r0, #1
 8001050:	2000      	movne	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmplt>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffea 	bl	8001034 <__aeabi_cfcmpeq>
 8001060:	bf34      	ite	cc
 8001062:	2001      	movcc	r0, #1
 8001064:	2000      	movcs	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmple>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffe0 	bl	8001034 <__aeabi_cfcmpeq>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpge>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffd2 	bl	800102c <__aeabi_cfrcmple>
 8001088:	bf94      	ite	ls
 800108a:	2001      	movls	r0, #1
 800108c:	2000      	movhi	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpgt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffc8 	bl	800102c <__aeabi_cfrcmple>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_f2iz>:
 80010a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b0:	d30f      	bcc.n	80010d2 <__aeabi_f2iz+0x2a>
 80010b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ba:	d90d      	bls.n	80010d8 <__aeabi_f2iz+0x30>
 80010bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010c8:	fa23 f002 	lsr.w	r0, r3, r2
 80010cc:	bf18      	it	ne
 80010ce:	4240      	negne	r0, r0
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	4770      	bx	lr
 80010d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010dc:	d101      	bne.n	80010e2 <__aeabi_f2iz+0x3a>
 80010de:	0242      	lsls	r2, r0, #9
 80010e0:	d105      	bne.n	80010ee <__aeabi_f2iz+0x46>
 80010e2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010e6:	bf08      	it	eq
 80010e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	4770      	bx	lr

080010f4 <memset>:
 80010f4:	0783      	lsls	r3, r0, #30
 80010f6:	b4f0      	push	{r4, r5, r6, r7}
 80010f8:	d048      	beq.n	800118c <memset+0x98>
 80010fa:	1e54      	subs	r4, r2, #1
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	d043      	beq.n	8001188 <memset+0x94>
 8001100:	b2cd      	uxtb	r5, r1
 8001102:	4603      	mov	r3, r0
 8001104:	e002      	b.n	800110c <memset+0x18>
 8001106:	2c00      	cmp	r4, #0
 8001108:	d03e      	beq.n	8001188 <memset+0x94>
 800110a:	4614      	mov	r4, r2
 800110c:	f803 5b01 	strb.w	r5, [r3], #1
 8001110:	f013 0f03 	tst.w	r3, #3
 8001114:	f104 32ff 	add.w	r2, r4, #4294967295
 8001118:	d1f5      	bne.n	8001106 <memset+0x12>
 800111a:	2c03      	cmp	r4, #3
 800111c:	d92d      	bls.n	800117a <memset+0x86>
 800111e:	b2cd      	uxtb	r5, r1
 8001120:	2c0f      	cmp	r4, #15
 8001122:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001126:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800112a:	d918      	bls.n	800115e <memset+0x6a>
 800112c:	f1a4 0710 	sub.w	r7, r4, #16
 8001130:	f103 0610 	add.w	r6, r3, #16
 8001134:	461a      	mov	r2, r3
 8001136:	093f      	lsrs	r7, r7, #4
 8001138:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800113c:	6015      	str	r5, [r2, #0]
 800113e:	3210      	adds	r2, #16
 8001140:	f842 5c0c 	str.w	r5, [r2, #-12]
 8001144:	f842 5c08 	str.w	r5, [r2, #-8]
 8001148:	f842 5c04 	str.w	r5, [r2, #-4]
 800114c:	42b2      	cmp	r2, r6
 800114e:	d1f5      	bne.n	800113c <memset+0x48>
 8001150:	f004 040f 	and.w	r4, r4, #15
 8001154:	3701      	adds	r7, #1
 8001156:	2c03      	cmp	r4, #3
 8001158:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800115c:	d90d      	bls.n	800117a <memset+0x86>
 800115e:	461e      	mov	r6, r3
 8001160:	4622      	mov	r2, r4
 8001162:	3a04      	subs	r2, #4
 8001164:	f846 5b04 	str.w	r5, [r6], #4
 8001168:	2a03      	cmp	r2, #3
 800116a:	d8fa      	bhi.n	8001162 <memset+0x6e>
 800116c:	1f22      	subs	r2, r4, #4
 800116e:	f004 0403 	and.w	r4, r4, #3
 8001172:	f022 0203 	bic.w	r2, r2, #3
 8001176:	3204      	adds	r2, #4
 8001178:	4413      	add	r3, r2
 800117a:	b12c      	cbz	r4, 8001188 <memset+0x94>
 800117c:	b2c9      	uxtb	r1, r1
 800117e:	441c      	add	r4, r3
 8001180:	f803 1b01 	strb.w	r1, [r3], #1
 8001184:	42a3      	cmp	r3, r4
 8001186:	d1fb      	bne.n	8001180 <memset+0x8c>
 8001188:	bcf0      	pop	{r4, r5, r6, r7}
 800118a:	4770      	bx	lr
 800118c:	4614      	mov	r4, r2
 800118e:	4603      	mov	r3, r0
 8001190:	e7c3      	b.n	800111a <memset+0x26>
 8001192:	bf00      	nop
	...

080011a0 <wakeup.4666.4212>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80011a0:	b410      	push	{r4}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80011a2:	2320      	movs	r3, #32
 80011a4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 80011a8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80011ac:	2b07      	cmp	r3, #7
 80011ae:	d80e      	bhi.n	80011ce <wakeup.4666.4212+0x2e>
 80011b0:	e8df f003 	tbb	[pc, r3]
 80011b4:	270d0d2b 	.word	0x270d0d2b
 80011b8:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 80011bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	3201      	adds	r2, #1
 80011c2:	609a      	str	r2, [r3, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80011c4:	e890 000c 	ldmia.w	r0, {r2, r3}
 80011c8:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80011ca:	6802      	ldr	r2, [r0, #0]
 80011cc:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80011ce:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80011d2:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 80011d4:	f241 3334 	movw	r3, #4916	; 0x1334
 80011d8:	6881      	ldr	r1, [r0, #8]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80011da:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80011dc:	f880 2020 	strb.w	r2, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80011e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  do {
    cp = cp->queue.next;
 80011e4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	428a      	cmp	r2, r1
 80011ea:	d2fb      	bcs.n	80011e4 <wakeup.4666.4212+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80011f0:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 80011f2:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 80011f4:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80011f6:	6058      	str	r0, [r3, #4]
 80011f8:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80011fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001200:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8001202:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e7e1      	b.n	80011ce <wakeup.4666.4212+0x2e>
 800120a:	2300      	movs	r3, #0
 800120c:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8001210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	f3af 8000 	nop.w
 800121c:	f3af 8000 	nop.w

08001220 <gpt1cb.11701>:

/*Función callback, llamada al cumplirse el tiempo de espera del GPT*/
static void gpt1cb(GPTDriver *gptp) {
  (void)gptp;
  
  palClearPad(GPIOA, TRIGG);
 8001220:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001224:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001228:	2240      	movs	r2, #64	; 0x40
 800122a:	615a      	str	r2, [r3, #20]
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <long_to_string_with_divisor.11430.4495>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8001230:	b4f0      	push	{r4, r5, r6, r7}
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf08      	it	eq
 8001236:	460b      	moveq	r3, r1
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8001238:	f100 070b 	add.w	r7, r0, #11
 800123c:	f100 050a 	add.w	r5, r0, #10
  do {
    i = (int)(l % radix);
 8001240:	fbb1 f6f2 	udiv	r6, r1, r2
 8001244:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8001248:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9')
 800124c:	2c39      	cmp	r4, #57	; 0x39
      i += 'A' - '0' - 10;
 800124e:	bfc8      	it	gt
 8001250:	f101 0437 	addgt.w	r4, r1, #55	; 0x37
    *--q = i;
 8001254:	b2e4      	uxtb	r4, r4
    l /= radix;
  } while ((ll /= radix) != 0);
 8001256:	fbb3 f3f2 	udiv	r3, r3, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 800125a:	4631      	mov	r1, r6
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800125c:	462e      	mov	r6, r5
 800125e:	f805 4901 	strb.w	r4, [r5], #-1
    l /= radix;
  } while ((ll /= radix) != 0);
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ec      	bne.n	8001240 <long_to_string_with_divisor.11430.4495+0x10>

  i = (int)(p + MAX_FILLER - q);
 8001266:	1bba      	subs	r2, r7, r6
 8001268:	4633      	mov	r3, r6
 800126a:	4402      	add	r2, r0
 800126c:	e001      	b.n	8001272 <long_to_string_with_divisor.11430.4495+0x42>
 800126e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
  do
    *p++ = *q++;
 8001272:	f800 4b01 	strb.w	r4, [r0], #1
  while (--i);
 8001276:	4290      	cmp	r0, r2
 8001278:	d1f9      	bne.n	800126e <long_to_string_with_divisor.11430.4495+0x3e>

  return p;
}
 800127a:	bcf0      	pop	{r4, r5, r6, r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <notify3.8755>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 8001280:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001284:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	f3af 8000 	nop.w
 800129c:	f3af 8000 	nop.w

080012a0 <notify2.8758>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 80012a0:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80012a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	f3af 8000 	nop.w
 80012b8:	f3af 8000 	nop.w
 80012bc:	f3af 8000 	nop.w

080012c0 <_port_irq_epilogue.4507>:
 80012c0:	2320      	movs	r3, #32
 80012c2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80012c6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80012ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80012d4:	d102      	bne.n	80012dc <_port_irq_epilogue.4507+0x1c>
 80012d6:	f383 8811 	msr	BASEPRI, r3
 80012da:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80012dc:	f3ef 8209 	mrs	r2, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80012e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012e4:	f842 3c04 	str.w	r3, [r2, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 80012e8:	f1a2 0320 	sub.w	r3, r2, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80012ec:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80012f0:	f241 3334 	movw	r3, #4916	; 0x1334
 80012f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012f8:	6819      	ldr	r1, [r3, #0]
  tprio_t p2 = currp->prio;
 80012fa:	699b      	ldr	r3, [r3, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80012fc:	6889      	ldr	r1, [r1, #8]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	4299      	cmp	r1, r3
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8001302:	bf8b      	itete	hi
 8001304:	f240 2375 	movwhi	r3, #629	; 0x275
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8001308:	f240 2378 	movwls	r3, #632	; 0x278

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800130c:	f6c0 0300 	movthi	r3, #2048	; 0x800
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8001310:	f6c0 0300 	movtls	r3, #2048	; 0x800
 8001314:	f842 3c08 	str.w	r3, [r2, #-8]
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	f3af 8000 	nop.w

08001320 <VectorB0.4285>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001324:	691a      	ldr	r2, [r3, #16]
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800132a:	0792      	lsls	r2, r2, #30
 800132c:	d403      	bmi.n	8001336 <VectorB0.4285+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800132e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001332:	f7ff bfc5 	b.w	80012c0 <_port_irq_epilogue.4507>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800133a:	2320      	movs	r3, #32
 800133c:	f383 8811 	msr	BASEPRI, r3
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8001340:	f241 3434 	movw	r4, #4916	; 0x1334
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001344:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8001348:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800134c:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 800134e:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8001350:	69e3      	ldr	r3, [r4, #28]
 8001352:	b292      	uxth	r2, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8001354:	1a16      	subs	r6, r2, r0
 8001356:	8919      	ldrh	r1, [r3, #8]
 8001358:	b2b6      	uxth	r6, r6
 800135a:	428e      	cmp	r6, r1
 800135c:	f104 071c 	add.w	r7, r4, #28
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;
 8001360:	bf24      	itt	cs
 8001362:	f04f 0800 	movcs.w	r8, #0
 8001366:	2620      	movcs	r6, #32

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8001368:	d31c      	bcc.n	80013a4 <VectorB0.4285+0x84>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800136a:	681a      	ldr	r2, [r3, #0]
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 800136c:	4401      	add	r1, r0
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800136e:	42ba      	cmp	r2, r7
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 8001370:	84e1      	strh	r1, [r4, #38]	; 0x26

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
 8001372:	68d9      	ldr	r1, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001374:	6057      	str	r7, [r2, #4]
    ch.vtlist.next = vtp->next;
 8001376:	61e2      	str	r2, [r4, #28]
    fn = vtp->func;
    vtp->func = NULL;
 8001378:	f8c3 800c 	str.w	r8, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800137c:	bf08      	it	eq
 800137e:	f8c5 800c 	streq.w	r8, [r5, #12]
 8001382:	f388 8811 	msr	BASEPRI, r8
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 8001386:	6918      	ldr	r0, [r3, #16]
 8001388:	4788      	blx	r1
 800138a:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800138e:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8001390:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 8001392:	69e3      	ldr	r3, [r4, #28]
 8001394:	b292      	uxth	r2, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8001396:	ebc0 0c02 	rsb	ip, r0, r2
 800139a:	8919      	ldrh	r1, [r3, #8]
 800139c:	fa1f fc8c 	uxth.w	ip, ip
 80013a0:	4561      	cmp	r1, ip
 80013a2:	d9e2      	bls.n	800136a <VectorB0.4285+0x4a>
    vtp = ch.vtlist.next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80013a4:	42bb      	cmp	r3, r7
 80013a6:	d00a      	beq.n	80013be <VectorB0.4285+0x9e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 80013a8:	4401      	add	r1, r0
 80013aa:	1a89      	subs	r1, r1, r2
 80013ac:	b289      	uxth	r1, r1
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80013ae:	2901      	cmp	r1, #1
 80013b0:	bf98      	it	ls
 80013b2:	2102      	movls	r1, #2
  }
  port_timer_set_alarm(now + delta);
 80013b4:	440a      	add	r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80013b6:	b292      	uxth	r2, r2
 80013b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34
 80013be:	2300      	movs	r3, #0
 80013c0:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80013c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80013c8:	f7ff bf7a 	b.w	80012c0 <_port_irq_epilogue.4507>
 80013cc:	f3af 8000 	nop.w

080013d0 <VectorA4.4446>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 80013d0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 80013d2:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80013d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
  if (gptp->state == GPT_ONESHOT) {
 80013da:	7818      	ldrb	r0, [r3, #0]
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
 80013e0:	2804      	cmp	r0, #4
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 80013e2:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
 80013e4:	d107      	bne.n	80013f6 <VectorA4.4446+0x26>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 80013e6:	2002      	movs	r0, #2
 80013e8:	7018      	strb	r0, [r3, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 80013ea:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 80013ec:	6111      	str	r1, [r2, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 80013ee:	68d1      	ldr	r1, [r2, #12]
 80013f0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80013f4:	60d1      	str	r1, [r2, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f241 00d0 	movw	r0, #4304	; 0x10d0
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001402:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD1);

  OSAL_IRQ_EPILOGUE();
}
 8001404:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD1);

  OSAL_IRQ_EPILOGUE();
 8001408:	f7ff bf5a 	b.w	80012c0 <_port_irq_epilogue.4507>
 800140c:	f3af 8000 	nop.w

08001410 <VectorB4.4453>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8001410:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 8001412:	f640 0400 	movw	r4, #2048	; 0x800
 8001416:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800141a:	68e3      	ldr	r3, [r4, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 800141c:	6862      	ldr	r2, [r4, #4]
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 800141e:	6918      	ldr	r0, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001420:	68dd      	ldr	r5, [r3, #12]
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 8001422:	7d11      	ldrb	r1, [r2, #20]
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001424:	4005      	ands	r5, r0
 8001426:	b2e8      	uxtb	r0, r5
  icup->tim->SR = ~sr;
 8001428:	43c0      	mvns	r0, r0
 800142a:	6118      	str	r0, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 800142c:	b9a9      	cbnz	r1, 800145a <VectorB4.4453+0x4a>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800142e:	0769      	lsls	r1, r5, #29
 8001430:	d502      	bpl.n	8001438 <VectorB4.4453+0x28>
      _icu_isr_invoke_width_cb(icup);
 8001432:	7823      	ldrb	r3, [r4, #0]
 8001434:	2b04      	cmp	r3, #4
 8001436:	d02b      	beq.n	8001490 <VectorB4.4453+0x80>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001438:	07aa      	lsls	r2, r5, #30
 800143a:	d419      	bmi.n	8001470 <VectorB4.4453+0x60>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 800143c:	07e9      	lsls	r1, r5, #31
 800143e:	d508      	bpl.n	8001452 <VectorB4.4453+0x42>
    _icu_isr_invoke_overflow_cb(icup);
 8001440:	6863      	ldr	r3, [r4, #4]
 8001442:	f640 0000 	movw	r0, #2048	; 0x800
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800144c:	4798      	blx	r3
 800144e:	2303      	movs	r3, #3
 8001450:	7023      	strb	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD3);

  OSAL_IRQ_EPILOGUE();
}
 8001452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD3);

  OSAL_IRQ_EPILOGUE();
 8001456:	f7ff bf33 	b.w	80012c0 <_port_irq_epilogue.4507>
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800145a:	07ab      	lsls	r3, r5, #30
 800145c:	d506      	bpl.n	800146c <VectorB4.4453+0x5c>
      _icu_isr_invoke_width_cb(icup);
 800145e:	7823      	ldrb	r3, [r4, #0]
 8001460:	2b04      	cmp	r3, #4
 8001462:	d103      	bne.n	800146c <VectorB4.4453+0x5c>
 8001464:	6893      	ldr	r3, [r2, #8]
 8001466:	b10b      	cbz	r3, 800146c <VectorB4.4453+0x5c>
 8001468:	4620      	mov	r0, r4
 800146a:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800146c:	0768      	lsls	r0, r5, #29
 800146e:	d5e5      	bpl.n	800143c <VectorB4.4453+0x2c>
      _icu_isr_invoke_period_cb(icup);
 8001470:	7823      	ldrb	r3, [r4, #0]
 8001472:	f640 0000 	movw	r0, #2048	; 0x800
 8001476:	2b04      	cmp	r3, #4
 8001478:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800147c:	d002      	beq.n	8001484 <VectorB4.4453+0x74>
 800147e:	2304      	movs	r3, #4
 8001480:	7023      	strb	r3, [r4, #0]
 8001482:	e7db      	b.n	800143c <VectorB4.4453+0x2c>
 8001484:	6843      	ldr	r3, [r0, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f8      	beq.n	800147e <VectorB4.4453+0x6e>
 800148c:	4798      	blx	r3
 800148e:	e7f6      	b.n	800147e <VectorB4.4453+0x6e>
  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 8001490:	6893      	ldr	r3, [r2, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0d0      	beq.n	8001438 <VectorB4.4453+0x28>
 8001496:	4620      	mov	r0, r4
 8001498:	4798      	blx	r3
 800149a:	e7cd      	b.n	8001438 <VectorB4.4453+0x28>
 800149c:	f3af 8000 	nop.w

080014a0 <SVC_Handler.4517>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80014a0:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80014a4:	3320      	adds	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80014a6:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80014aa:	2300      	movs	r3, #0
 80014ac:	f383 8811 	msr	BASEPRI, r3
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	f3af 8000 	nop.w
 80014b8:	f3af 8000 	nop.w
 80014bc:	f3af 8000 	nop.w

080014c0 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
 80014c0:	b430      	push	{r4, r5}
 80014c2:	2320      	movs	r3, #32
 80014c4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80014c8:	f241 33a8 	movw	r3, #5032	; 0x13a8
 80014cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014d0:	681c      	ldr	r4, [r3, #0]

  if (((size_t)endmem - (size_t)p) < size) {
 80014d2:	f241 3208 	movw	r2, #4872	; 0x1308

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80014d6:	3c01      	subs	r4, #1

  if (((size_t)endmem - (size_t)p) < size) {
 80014d8:	f2c2 0200 	movt	r2, #8192	; 0x2000

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80014dc:	440c      	add	r4, r1
  uint8_t *p;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80014de:	1e4d      	subs	r5, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);

  if (((size_t)endmem - (size_t)p) < size) {
 80014e0:	6812      	ldr	r2, [r2, #0]
  uint8_t *p;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80014e2:	4249      	negs	r1, r1
 80014e4:	4405      	add	r5, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80014e6:	ea04 0001 	and.w	r0, r4, r1

  if (((size_t)endmem - (size_t)p) < size) {
 80014ea:	1a12      	subs	r2, r2, r0
  uint8_t *p;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80014ec:	4029      	ands	r1, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);

  if (((size_t)endmem - (size_t)p) < size) {
 80014ee:	4291      	cmp	r1, r2
    return NULL;
  }
  nextmem = p + size;
 80014f0:	bf9a      	itte	ls
 80014f2:	1809      	addls	r1, r1, r0
 80014f4:	6019      	strls	r1, [r3, #0]

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);

  if (((size_t)endmem - (size_t)p) < size) {
    return NULL;
 80014f6:	2000      	movhi	r0, #0
 80014f8:	2300      	movs	r3, #0
 80014fa:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
 80014fe:	bc30      	pop	{r4, r5}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	f3af 8000 	nop.w
 8001508:	f3af 8000 	nop.w
 800150c:	f3af 8000 	nop.w

08001510 <_idle_thread.4310>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8001510:	e7fe      	b.n	8001510 <_idle_thread.4310>
 8001512:	bf00      	nop
 8001514:	f3af 8000 	nop.w
 8001518:	f3af 8000 	nop.w
 800151c:	f3af 8000 	nop.w

08001520 <BusFault_Handler.4550>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 8001520:	e7fe      	b.n	8001520 <BusFault_Handler.4550>
 8001522:	bf00      	nop
 8001524:	f3af 8000 	nop.w
 8001528:	f3af 8000 	nop.w
 800152c:	f3af 8000 	nop.w

08001530 <chSchGoSleepS.4535>:
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp = currp;
 8001530:	f241 3334 	movw	r3, #4916	; 0x1334
 8001534:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001538:	b430      	push	{r4, r5}
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 800153a:	681a      	ldr	r2, [r3, #0]
  thread_t *otp = currp;
 800153c:	6999      	ldr	r1, [r3, #24]

  tqp->next             = tp->queue.next;
 800153e:	6814      	ldr	r4, [r2, #0]
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001540:	2501      	movs	r5, #1
  thread_t *otp = currp;

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8001542:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001546:	6063      	str	r3, [r4, #4]
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001548:	f882 5020 	strb.w	r5, [r2, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 800154c:	601c      	str	r4, [r3, #0]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800154e:	4610      	mov	r0, r2
}
 8001550:	bc30      	pop	{r4, r5}
     time quantum when it will wakeup.*/
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001552:	619a      	str	r2, [r3, #24]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001554:	f7fe be7e 	b.w	8000254 <_port_switch>
 8001558:	f3af 8000 	nop.w
 800155c:	f3af 8000 	nop.w

08001560 <chSchGoSleepTimeoutS.4375>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001562:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001566:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001568:	b087      	sub	sp, #28
 800156a:	4607      	mov	r7, r0

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800156c:	d060      	beq.n	8001630 <chSchGoSleepTimeoutS.4375+0xd0>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800156e:	f241 3434 	movw	r4, #4916	; 0x1334
 8001572:	f2c2 0400 	movt	r4, #8192	; 0x2000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001576:	4625      	mov	r5, r4
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001578:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800157c:	f855 3f1c 	ldr.w	r3, [r5, #28]!
 8001580:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8001584:	f241 12a1 	movw	r2, #4513	; 0x11a1
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 8001588:	69a6      	ldr	r6, [r4, #24]
  vtp->func = vtfunc;
 800158a:	f6c0 0200 	movt	r2, #2048	; 0x800
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 800158e:	2901      	cmp	r1, #1
 8001590:	bf98      	it	ls
 8001592:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001594:	42ab      	cmp	r3, r5
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 8001596:	9605      	str	r6, [sp, #20]
 8001598:	fa1f fc8c 	uxth.w	ip, ip
  vtp->func = vtfunc;
 800159c:	9204      	str	r2, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800159e:	d075      	beq.n	800168c <chSchGoSleepTimeoutS.4375+0x12c>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
 80015a0:	f8b4 e026 	ldrh.w	lr, [r4, #38]	; 0x26
 80015a4:	ebce 060c 	rsb	r6, lr, ip
 80015a8:	198a      	adds	r2, r1, r6
 80015aa:	b292      	uxth	r2, r2

    if (delta < now - ch.vtlist.lasttime) {
 80015ac:	42b2      	cmp	r2, r6
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 80015ae:	8919      	ldrh	r1, [r3, #8]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;

    if (delta < now - ch.vtlist.lasttime) {
 80015b0:	db39      	blt.n	8001626 <chSchGoSleepTimeoutS.4375+0xc6>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 80015b2:	428a      	cmp	r2, r1
     /* A small delay that will become the first element in the delta list
        and next deadline.*/
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
 80015b4:	bf3e      	ittt	cc
 80015b6:	eb02 060e 	addcc.w	r6, r2, lr
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80015ba:	b2b6      	uxthcc	r6, r6
 80015bc:	6346      	strcc	r6, [r0, #52]	; 0x34
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80015be:	428a      	cmp	r2, r1
 80015c0:	d905      	bls.n	80015ce <chSchGoSleepTimeoutS.4375+0x6e>
    delta -= p->delta;
    p = p->next;
 80015c2:	681b      	ldr	r3, [r3, #0]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
    delta -= p->delta;
 80015c4:	1a52      	subs	r2, r2, r1
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80015c6:	8919      	ldrh	r1, [r3, #8]
    delta -= p->delta;
 80015c8:	b292      	uxth	r2, r2
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80015ca:	4291      	cmp	r1, r2
 80015cc:	d3f9      	bcc.n	80015c2 <chSchGoSleepTimeoutS.4375+0x62>
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 80015ce:	6859      	ldr	r1, [r3, #4]
  vtp->prev->next = vtp;
 80015d0:	ae01      	add	r6, sp, #4
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 80015d2:	9102      	str	r1, [sp, #8]
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 80015d4:	9301      	str	r3, [sp, #4]
  vtp->prev = vtp->next->prev;
  vtp->prev->next = vtp;
 80015d6:	600e      	str	r6, [r1, #0]
  p->prev = vtp;
 80015d8:	605e      	str	r6, [r3, #4]
  vtp->delta = delta
 80015da:	f8ad 200c 	strh.w	r2, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 80015de:	8918      	ldrh	r0, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 80015e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
  p->prev = vtp;
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 80015e4:	1a82      	subs	r2, r0, r2
 80015e6:	811a      	strh	r2, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 80015e8:	84a1      	strh	r1, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 80015ea:	4638      	mov	r0, r7
 80015ec:	f7ff ffa0 	bl	8001530 <chSchGoSleepS.4535>
    if (chVTIsArmedI(&vt)) {
 80015f0:	9b04      	ldr	r3, [sp, #16]
 80015f2:	b1a3      	cbz	r3, 800161e <chSchGoSleepTimeoutS.4375+0xbe>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80015f4:	69e2      	ldr	r2, [r4, #28]
 80015f6:	f241 3334 	movw	r3, #4916	; 0x1334
 80015fa:	42b2      	cmp	r2, r6
 80015fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001600:	d020      	beq.n	8001644 <chSchGoSleepTimeoutS.4375+0xe4>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001602:	9a02      	ldr	r2, [sp, #8]
 8001604:	9b01      	ldr	r3, [sp, #4]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
 8001606:	2100      	movs	r1, #0

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001608:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 800160a:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800160c:	42ab      	cmp	r3, r5
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
    vtp->next->prev = vtp->prev;
 800160e:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8001610:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001612:	d004      	beq.n	800161e <chSchGoSleepTimeoutS.4375+0xbe>
      vtp->next->delta += vtp->delta;
 8001614:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001618:	891a      	ldrh	r2, [r3, #8]
 800161a:	440a      	add	r2, r1
 800161c:	811a      	strh	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 800161e:	69a3      	ldr	r3, [r4, #24]
}
 8001620:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001622:	b007      	add	sp, #28
 8001624:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 8001626:	681b      	ldr	r3, [r3, #0]

    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8001628:	1a52      	subs	r2, r2, r1
 800162a:	b292      	uxth	r2, r2
 800162c:	8919      	ldrh	r1, [r3, #8]
 800162e:	e7c6      	b.n	80015be <chSchGoSleepTimeoutS.4375+0x5e>
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8001630:	f7ff ff7e 	bl	8001530 <chSchGoSleepS.4535>
 8001634:	f241 3434 	movw	r4, #4916	; 0x1334
 8001638:	f2c2 0400 	movt	r4, #8192	; 0x2000
  }

  return currp->u.rdymsg;
 800163c:	69a3      	ldr	r3, [r4, #24]
}
 800163e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001640:	b007      	add	sp, #28
 8001642:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8001644:	9a01      	ldr	r2, [sp, #4]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8001646:	2100      	movs	r1, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001648:	42aa      	cmp	r2, r5

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 800164a:	61da      	str	r2, [r3, #28]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800164c:	bf08      	it	eq
 800164e:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001652:	6055      	str	r5, [r2, #4]
  vtp->func = NULL;
 8001654:	9104      	str	r1, [sp, #16]
 8001656:	bf08      	it	eq
 8001658:	60d9      	streq	r1, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800165a:	d0e0      	beq.n	800161e <chSchGoSleepTimeoutS.4375+0xbe>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800165c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001660:	6a48      	ldr	r0, [r1, #36]	; 0x24
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8001662:	8cdd      	ldrh	r5, [r3, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8001664:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 8001668:	8913      	ldrh	r3, [r2, #8]
 800166a:	b280      	uxth	r0, r0
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 800166c:	1b45      	subs	r5, r0, r5

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 800166e:	4433      	add	r3, r6
 8001670:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8001672:	b2ad      	uxth	r5, r5

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8001674:	42ab      	cmp	r3, r5

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8001676:	8113      	strh	r3, [r2, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8001678:	d9d1      	bls.n	800161e <chSchGoSleepTimeoutS.4375+0xbe>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 800167a:	1b5b      	subs	r3, r3, r5
 800167c:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800167e:	2b01      	cmp	r3, #1
 8001680:	bf98      	it	ls
 8001682:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 8001684:	4403      	add	r3, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001686:	b29b      	uxth	r3, r3
 8001688:	634b      	str	r3, [r1, #52]	; 0x34
 800168a:	e7c8      	b.n	800161e <chSchGoSleepTimeoutS.4375+0xbe>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
      vtp->delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 800168c:	eb01 0e0c 	add.w	lr, r1, ip
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
      ch.vtlist.next = vtp;
 8001690:	ae01      	add	r6, sp, #4
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001692:	fa1f fe8e 	uxth.w	lr, lr
  STM32_ST_TIM->SR     = 0;
 8001696:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001698:	2302      	movs	r3, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 800169a:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
      ch.vtlist.next = vtp;
      ch.vtlist.prev = vtp;
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 800169e:	9501      	str	r5, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80016a0:	9502      	str	r5, [sp, #8]
      vtp->delta = delay;
 80016a2:	f8ad 100c 	strh.w	r1, [sp, #12]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
      ch.vtlist.next = vtp;
 80016a6:	61e6      	str	r6, [r4, #28]
      ch.vtlist.prev = vtp;
 80016a8:	6226      	str	r6, [r4, #32]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80016aa:	f8c0 e034 	str.w	lr, [r0, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80016ae:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80016b0:	60c3      	str	r3, [r0, #12]
 80016b2:	e79a      	b.n	80015ea <chSchGoSleepTimeoutS.4375+0x8a>
 80016b4:	f3af 8000 	nop.w
 80016b8:	f3af 8000 	nop.w
 80016bc:	f3af 8000 	nop.w

080016c0 <chThdEnqueueTimeoutS.4371>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80016c0:	b410      	push	{r4}
 80016c2:	4602      	mov	r2, r0

  if (TIME_IMMEDIATE == timeout) {
 80016c4:	b171      	cbz	r1, 80016e4 <chThdEnqueueTimeoutS.4371+0x24>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80016c6:	f241 3334 	movw	r3, #4916	; 0x1334
 80016ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 80016ce:	6844      	ldr	r4, [r0, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80016d2:	2004      	movs	r0, #4
 80016d4:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
 80016d8:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 80016da:	6053      	str	r3, [r2, #4]
}
 80016dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80016e0:	f7ff bf3e 	b.w	8001560 <chSchGoSleepTimeoutS.4375>
}
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop

080016f0 <iqGetTimeout.4312>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	2320      	movs	r3, #32
 80016f4:	4604      	mov	r4, r0
 80016f6:	460e      	mov	r6, r1
 80016f8:	f383 8811 	msr	BASEPRI, r3
 80016fc:	e003      	b.n	8001706 <iqGetTimeout.4312+0x16>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 80016fe:	f7ff ffdf 	bl	80016c0 <chThdEnqueueTimeoutS.4371>
  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001702:	2800      	cmp	r0, #0
 8001704:	db1b      	blt.n	800173e <iqGetTimeout.4312+0x4e>
  uint8_t b;

  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 8001706:	68a5      	ldr	r5, [r4, #8]
 8001708:	4620      	mov	r0, r4
 800170a:	4631      	mov	r1, r6
 800170c:	2d00      	cmp	r5, #0
 800170e:	d0f6      	beq.n	80016fe <iqGetTimeout.4312+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001710:	69a2      	ldr	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001712:	6921      	ldr	r1, [r4, #16]
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001714:	1c53      	adds	r3, r2, #1
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8001716:	68a0      	ldr	r0, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8001718:	428b      	cmp	r3, r1
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800171a:	61a3      	str	r3, [r4, #24]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 800171c:	f100 30ff 	add.w	r0, r0, #4294967295
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001720:	bf28      	it	cs
 8001722:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8001724:	60a0      	str	r0, [r4, #8]
  b = *iqp->q_rdptr++;
 8001726:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001728:	bf28      	it	cs
 800172a:	61a3      	strcs	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 800172c:	69e3      	ldr	r3, [r4, #28]
 800172e:	b10b      	cbz	r3, 8001734 <iqGetTimeout.4312+0x44>
    iqp->q_notify(iqp);
 8001730:	4620      	mov	r0, r4
 8001732:	4798      	blx	r3
 8001734:	2300      	movs	r3, #0
 8001736:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return (msg_t)b;
 800173a:	4628      	mov	r0, r5
}
 800173c:	bd70      	pop	{r4, r5, r6, pc}
 800173e:	f385 8811 	msr	BASEPRI, r5
 8001742:	bd70      	pop	{r4, r5, r6, pc}
 8001744:	f3af 8000 	nop.w
 8001748:	f3af 8000 	nop.w
 800174c:	f3af 8000 	nop.w

08001750 <_gett.8068.4305>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t _gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001750:	300c      	adds	r0, #12
 8001752:	f7ff bfcd 	b.w	80016f0 <iqGetTimeout.4312>
 8001756:	bf00      	nop
 8001758:	f3af 8000 	nop.w
 800175c:	f3af 8000 	nop.w

08001760 <_get.8072.4309>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t _get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001760:	300c      	adds	r0, #12
 8001762:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001766:	f7ff bfc3 	b.w	80016f0 <iqGetTimeout.4312>
 800176a:	bf00      	nop
 800176c:	f3af 8000 	nop.w

08001770 <iqReadTimeout.4330>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
 8001770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001774:	4698      	mov	r8, r3
 8001776:	b083      	sub	sp, #12
 8001778:	4604      	mov	r4, r0
 800177a:	4689      	mov	r9, r1
 800177c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
 800177e:	69c7      	ldr	r7, [r0, #28]
 8001780:	2320      	movs	r3, #32
 8001782:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800178a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800178c:	f108 3bff 	add.w	fp, r8, #4294967295
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001790:	4442      	add	r2, r8
 8001792:	b292      	uxth	r2, r2
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
  size_t r = 0;
 8001794:	2600      	movs	r6, #0
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001796:	9201      	str	r2, [sp, #4]
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001798:	fa1f fb8b 	uxth.w	fp, fp
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 800179c:	68a3      	ldr	r3, [r4, #8]
 800179e:	b30b      	cbz	r3, 80017e4 <iqReadTimeout.4330+0x74>
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 80017a0:	69a3      	ldr	r3, [r4, #24]
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 80017a2:	68a1      	ldr	r1, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80017a4:	1c5a      	adds	r2, r3, #1
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 80017a6:	3901      	subs	r1, #1
    *bp++ = *iqp->q_rdptr++;
 80017a8:	61a2      	str	r2, [r4, #24]
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 80017aa:	60a1      	str	r1, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	f109 0a01 	add.w	sl, r9, #1
 80017b2:	f889 3000 	strb.w	r3, [r9]
    if (iqp->q_rdptr >= iqp->q_top) {
 80017b6:	6923      	ldr	r3, [r4, #16]
 80017b8:	69a2      	ldr	r2, [r4, #24]
 80017ba:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 80017bc:	bf24      	itt	cs
 80017be:	68e3      	ldrcs	r3, [r4, #12]
 80017c0:	61a3      	strcs	r3, [r4, #24]
    }

    /* Inform the low side that the queue has at least one slot available.*/
    if (nfy != NULL) {
 80017c2:	b10f      	cbz	r7, 80017c8 <iqReadTimeout.4330+0x58>
      nfy(iqp);
 80017c4:	4620      	mov	r0, r4
 80017c6:	47b8      	blx	r7
 80017c8:	2300      	movs	r3, #0
 80017ca:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
    if (--n == 0U) {
 80017ce:	3d01      	subs	r5, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
 80017d0:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 80017d4:	d01a      	beq.n	800180c <iqReadTimeout.4330+0x9c>
 80017d6:	2220      	movs	r2, #32
 80017d8:	f382 8811 	msr	BASEPRI, r2
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 80017dc:	68a3      	ldr	r3, [r4, #8]
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 80017de:	46d1      	mov	r9, sl
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1dd      	bne.n	80017a0 <iqReadTimeout.4330+0x30>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80017e4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80017e8:	4593      	cmp	fp, r2
 80017ea:	d813      	bhi.n	8001814 <iqReadTimeout.4330+0xa4>
 80017ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f0:	6a51      	ldr	r1, [r2, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 80017f2:	9a01      	ldr	r2, [sp, #4]
 80017f4:	1a51      	subs	r1, r2, r1
 80017f6:	b289      	uxth	r1, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 80017f8:	4588      	cmp	r8, r1
 80017fa:	d305      	bcc.n	8001808 <iqReadTimeout.4330+0x98>
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff ff5f 	bl	80016c0 <chThdEnqueueTimeoutS.4371>

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8001802:	2800      	cmp	r0, #0
 8001804:	d0ca      	beq.n	800179c <iqReadTimeout.4330+0x2c>
 8001806:	2300      	movs	r3, #0
 8001808:	f383 8811 	msr	BASEPRI, r3
      return r;
    }

    osalSysLock();
  }
}
 800180c:	4630      	mov	r0, r6
 800180e:	b003      	add	sp, #12
 8001810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001814:	4620      	mov	r0, r4
 8001816:	4641      	mov	r1, r8
 8001818:	f7ff ff52 	bl	80016c0 <chThdEnqueueTimeoutS.4371>

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 800181c:	2800      	cmp	r0, #0
 800181e:	d0bd      	beq.n	800179c <iqReadTimeout.4330+0x2c>
 8001820:	e7f1      	b.n	8001806 <iqReadTimeout.4330+0x96>
 8001822:	bf00      	nop
 8001824:	f3af 8000 	nop.w
 8001828:	f3af 8000 	nop.w
 800182c:	f3af 8000 	nop.w

08001830 <_readt.8044.4319>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001830:	300c      	adds	r0, #12
 8001832:	f7ff bf9d 	b.w	8001770 <iqReadTimeout.4330>
 8001836:	bf00      	nop
 8001838:	f3af 8000 	nop.w
 800183c:	f3af 8000 	nop.w

08001840 <_read.8052.4325>:
                        n, TIME_INFINITE);
}

static size_t _read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001840:	300c      	adds	r0, #12
 8001842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001846:	f7ff bf93 	b.w	8001770 <iqReadTimeout.4330>
 800184a:	bf00      	nop
 800184c:	f3af 8000 	nop.w

08001850 <oqPutTimeout.4345>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001852:	4604      	mov	r4, r0
 8001854:	460f      	mov	r7, r1
 8001856:	4616      	mov	r6, r2
 8001858:	2320      	movs	r3, #32
 800185a:	f383 8811 	msr	BASEPRI, r3
 800185e:	e003      	b.n	8001868 <oqPutTimeout.4345+0x18>
 8001860:	f7ff ff2e 	bl	80016c0 <chThdEnqueueTimeoutS.4371>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001864:	2800      	cmp	r0, #0
 8001866:	db1a      	blt.n	800189e <oqPutTimeout.4345+0x4e>
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 8001868:	68a5      	ldr	r5, [r4, #8]
 800186a:	4620      	mov	r0, r4
 800186c:	4631      	mov	r1, r6
 800186e:	2d00      	cmp	r5, #0
 8001870:	d0f6      	beq.n	8001860 <oqPutTimeout.4345+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001872:	6963      	ldr	r3, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001874:	68a1      	ldr	r1, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001876:	1c5a      	adds	r2, r3, #1
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001878:	3901      	subs	r1, #1
  *oqp->q_wrptr++ = b;
 800187a:	6162      	str	r2, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 800187c:	60a1      	str	r1, [r4, #8]
  *oqp->q_wrptr++ = b;
 800187e:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001880:	6923      	ldr	r3, [r4, #16]
 8001882:	6962      	ldr	r2, [r4, #20]
 8001884:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001886:	bf24      	itt	cs
 8001888:	68e3      	ldrcs	r3, [r4, #12]
 800188a:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 800188c:	69e3      	ldr	r3, [r4, #28]
 800188e:	b10b      	cbz	r3, 8001894 <oqPutTimeout.4345+0x44>
    oqp->q_notify(oqp);
 8001890:	4620      	mov	r0, r4
 8001892:	4798      	blx	r3
 8001894:	2300      	movs	r3, #0
 8001896:	f383 8811 	msr	BASEPRI, r3
 800189a:	2000      	movs	r0, #0
  }

  osalSysUnlock();

  return MSG_OK;
}
 800189c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800189e:	f385 8811 	msr	BASEPRI, r5
 80018a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a4:	f3af 8000 	nop.w
 80018a8:	f3af 8000 	nop.w
 80018ac:	f3af 8000 	nop.w

080018b0 <_putt.8075.4336>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80018b0:	3030      	adds	r0, #48	; 0x30
 80018b2:	f7ff bfcd 	b.w	8001850 <oqPutTimeout.4345>
 80018b6:	bf00      	nop
 80018b8:	f3af 8000 	nop.w
 80018bc:	f3af 8000 	nop.w

080018c0 <_put.8080.4341>:
                       n, TIME_INFINITE);
}

static msg_t _put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80018c0:	3030      	adds	r0, #48	; 0x30
 80018c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c6:	f7ff bfc3 	b.w	8001850 <oqPutTimeout.4345>
 80018ca:	bf00      	nop
 80018cc:	f3af 8000 	nop.w

080018d0 <oqWriteTimeout.4365>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 80018d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d4:	4698      	mov	r8, r3
 80018d6:	b083      	sub	sp, #12
 80018d8:	4604      	mov	r4, r0
 80018da:	4689      	mov	r9, r1
 80018dc:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 80018de:	69c7      	ldr	r7, [r0, #28]
 80018e0:	2320      	movs	r3, #32
 80018e2:	f383 8811 	msr	BASEPRI, r3
 80018e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80018ec:	f108 3bff 	add.w	fp, r8, #4294967295
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 80018f0:	4442      	add	r2, r8
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;
 80018f2:	2600      	movs	r6, #0
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 80018f4:	b292      	uxth	r2, r2
 80018f6:	9201      	str	r2, [sp, #4]
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80018f8:	fa1f fb8b 	uxth.w	fp, fp
 80018fc:	46b2      	mov	sl, r6
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 80018fe:	68a3      	ldr	r3, [r4, #8]
 8001900:	b1fb      	cbz	r3, 8001942 <oqWriteTimeout.4365+0x72>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001902:	6963      	ldr	r3, [r4, #20]
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8001904:	68a1      	ldr	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001906:	1c5a      	adds	r2, r3, #1
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8001908:	3901      	subs	r1, #1
    *oqp->q_wrptr++ = *bp++;
 800190a:	6162      	str	r2, [r4, #20]
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 800190c:	60a1      	str	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800190e:	f899 2000 	ldrb.w	r2, [r9]
 8001912:	f109 0901 	add.w	r9, r9, #1
 8001916:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001918:	6923      	ldr	r3, [r4, #16]
 800191a:	6962      	ldr	r2, [r4, #20]
 800191c:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800191e:	bf24      	itt	cs
 8001920:	68e3      	ldrcs	r3, [r4, #12]
 8001922:	6163      	strcs	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 8001924:	b10f      	cbz	r7, 800192a <oqWriteTimeout.4365+0x5a>
      nfy(oqp);
 8001926:	4620      	mov	r0, r4
 8001928:	47b8      	blx	r7
 800192a:	f38a 8811 	msr	BASEPRI, sl

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 800192e:	3d01      	subs	r5, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
 8001930:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8001934:	d019      	beq.n	800196a <oqWriteTimeout.4365+0x9a>
 8001936:	2320      	movs	r3, #32
 8001938:	f383 8811 	msr	BASEPRI, r3
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 800193c:	68a3      	ldr	r3, [r4, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1df      	bne.n	8001902 <oqWriteTimeout.4365+0x32>
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001942:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8001946:	4593      	cmp	fp, r2
 8001948:	d813      	bhi.n	8001972 <oqWriteTimeout.4365+0xa2>
 800194a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800194e:	6a51      	ldr	r1, [r2, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001950:	9a01      	ldr	r2, [sp, #4]
 8001952:	1a51      	subs	r1, r2, r1
 8001954:	b289      	uxth	r1, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8001956:	4588      	cmp	r8, r1
 8001958:	d305      	bcc.n	8001966 <oqWriteTimeout.4365+0x96>
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff feb0 	bl	80016c0 <chThdEnqueueTimeoutS.4371>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8001960:	2800      	cmp	r0, #0
 8001962:	d0cc      	beq.n	80018fe <oqWriteTimeout.4365+0x2e>
 8001964:	2300      	movs	r3, #0
 8001966:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
 800196a:	4630      	mov	r0, r6
 800196c:	b003      	add	sp, #12
 800196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001972:	4620      	mov	r0, r4
 8001974:	4641      	mov	r1, r8
 8001976:	f7ff fea3 	bl	80016c0 <chThdEnqueueTimeoutS.4371>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 800197a:	2800      	cmp	r0, #0
 800197c:	d0bf      	beq.n	80018fe <oqWriteTimeout.4365+0x2e>
 800197e:	e7f1      	b.n	8001964 <oqWriteTimeout.4365+0x94>

08001980 <_writet.8057.4354>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001980:	3030      	adds	r0, #48	; 0x30
 8001982:	f7ff bfa5 	b.w	80018d0 <oqWriteTimeout.4365>
 8001986:	bf00      	nop
 8001988:	f3af 8000 	nop.w
 800198c:	f3af 8000 	nop.w

08001990 <_write.8063.4360>:
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001990:	3030      	adds	r0, #48	; 0x30
 8001992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001996:	f7ff bf9b 	b.w	80018d0 <oqWriteTimeout.4365>
 800199a:	bf00      	nop
 800199c:	f3af 8000 	nop.w

080019a0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80019a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019a8:	681a      	ldr	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80019aa:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80019b2:	680a      	ldr	r2, [r1, #0]
 80019b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b8:	0790      	lsls	r0, r2, #30
 80019ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019be:	d5f8      	bpl.n	80019b2 <__early_init+0x12>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80019c0:	6819      	ldr	r1, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80019c2:	2200      	movs	r2, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80019c4:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 80019c8:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80019ca:	4619      	mov	r1, r3
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80019cc:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80019ce:	684a      	ldr	r2, [r1, #4]
 80019d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d4:	f012 0f0c 	tst.w	r2, #12
 80019d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019dc:	d1f7      	bne.n	80019ce <__early_init+0x2e>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 80019de:	681a      	ldr	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80019e0:	4619      	mov	r1, r3
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 80019e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019e6:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80019e8:	680a      	ldr	r2, [r1, #0]
 80019ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ee:	0392      	lsls	r2, r2, #14
 80019f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019f4:	d5f8      	bpl.n	80019e8 <__early_init+0x48>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80019f6:	685a      	ldr	r2, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80019f8:	4619      	mov	r1, r3
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80019fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019fe:	605a      	str	r2, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001a06:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001a08:	680a      	ldr	r2, [r1, #0]
 8001a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0e:	0190      	lsls	r0, r2, #6
 8001a10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a14:	d5f8      	bpl.n	8001a08 <__early_init+0x68>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a1a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a1e:	2110      	movs	r1, #16
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#else
  RCC->CFGR = STM32_MCOSEL |                STM32_PLLMUL | STM32_PLLXTPRE |
 8001a20:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001a24:	6058      	str	r0, [r3, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001a26:	6011      	str	r1, [r2, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001a28:	6859      	ldr	r1, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001a2a:	461a      	mov	r2, r3
  FLASH->ACR = STM32_FLASHBITS;

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001a2c:	f041 0102 	orr.w	r1, r1, #2
 8001a30:	6059      	str	r1, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001a32:	6853      	ldr	r3, [r2, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d1fa      	bne.n	8001a32 <__early_init+0x92>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop

08001a40 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 8001a40:	f241 3234 	movw	r2, #4916	; 0x1334
 8001a44:	f2c2 0200 	movt	r2, #8192	; 0x2000
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8001a48:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8001a4a:	b470      	push	{r4, r5, r6}

  tqp->next             = tp->queue.next;
 8001a4c:	6803      	ldr	r3, [r0, #0]
  thread_t *otp = currp;
 8001a4e:	6995      	ldr	r5, [r2, #24]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001a50:	2601      	movs	r6, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001a52:	2100      	movs	r1, #0
 8001a54:	68ac      	ldr	r4, [r5, #8]
 8001a56:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001a58:	605a      	str	r2, [r3, #4]
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001a5a:	f880 6020 	strb.w	r6, [r0, #32]
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001a5e:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001a60:	f885 1020 	strb.w	r1, [r5, #32]
 8001a64:	e000      	b.n	8001a68 <chSchDoReschedule+0x28>
 8001a66:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	42a2      	cmp	r2, r4
 8001a6c:	d8fb      	bhi.n	8001a66 <chSchDoReschedule+0x26>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8001a6e:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001a70:	4629      	mov	r1, r5
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8001a72:	602b      	str	r3, [r5, #0]
  tp->queue.prev             = cp->queue.prev;
 8001a74:	606a      	str	r2, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8001a76:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8001a78:	605d      	str	r5, [r3, #4]
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 8001a7a:	bc70      	pop	{r4, r5, r6}
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001a7c:	f7fe bbea 	b.w	8000254 <_port_switch>

08001a80 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001a80:	b4f0      	push	{r4, r5, r6, r7}
 8001a82:	4e13      	ldr	r6, [pc, #76]	; (8001ad0 <__init_ram_areas+0x50>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001a84:	2500      	movs	r5, #0
 8001a86:	f106 0770 	add.w	r7, r6, #112	; 0x70
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 8001a8a:	f1a6 0110 	sub.w	r1, r6, #16
 8001a8e:	c91a      	ldmia	r1, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001a90:	42a3      	cmp	r3, r4
 8001a92:	d20d      	bcs.n	8001ab0 <__init_ram_areas+0x30>
 8001a94:	3904      	subs	r1, #4
 8001a96:	461a      	mov	r2, r3
      *p = *tp;
 8001a98:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8001a9c:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001aa0:	42a2      	cmp	r2, r4
 8001aa2:	d3f9      	bcc.n	8001a98 <__init_ram_areas+0x18>
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	4414      	add	r4, r2
 8001aa8:	f024 0403 	bic.w	r4, r4, #3
 8001aac:	3404      	adds	r4, #4
 8001aae:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001ab0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d203      	bcs.n	8001ac0 <__init_ram_areas+0x40>
      *p = 0;
 8001ab8:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d3fb      	bcc.n	8001ab8 <__init_ram_areas+0x38>
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001ac0:	42be      	cmp	r6, r7
 8001ac2:	f106 0310 	add.w	r3, r6, #16
 8001ac6:	d201      	bcs.n	8001acc <__init_ram_areas+0x4c>
 8001ac8:	461e      	mov	r6, r3
 8001aca:	e7de      	b.n	8001a8a <__init_ram_areas+0xa>
#endif
}
 8001acc:	bcf0      	pop	{r4, r5, r6, r7}
 8001ace:	4770      	bx	lr
 8001ad0:	08003014 	.word	0x08003014
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	f3af 8000 	nop.w
 8001adc:	f3af 8000 	nop.w

08001ae0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001ae0:	e7fe      	b.n	8001ae0 <__default_exit>
 8001ae2:	bf00      	nop
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	f3af 8000 	nop.w
 8001aec:	f3af 8000 	nop.w

08001af0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	f3af 8000 	nop.w
 8001afc:	f3af 8000 	nop.w

08001b00 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	f3af 8000 	nop.w
 8001b08:	f3af 8000 	nop.w
 8001b0c:	f3af 8000 	nop.w

08001b10 <sd_lld_start>:
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 8001b10:	f642 7390 	movw	r3, #12176	; 0x2f90

  if (sdp->state == SD_STOP) {
 8001b14:	7a02      	ldrb	r2, [r0, #8]
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 8001b16:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001b1a:	2900      	cmp	r1, #0
 8001b1c:	bf08      	it	eq
 8001b1e:	4619      	moveq	r1, r3

  if (sdp->state == SD_STOP) {
 8001b20:	2a01      	cmp	r2, #1
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8001b22:	b470      	push	{r4, r5, r6}

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8001b24:	d028      	beq.n	8001b78 <sd_lld_start+0x68>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8001b26:	680c      	ldr	r4, [r1, #0]
 8001b28:	f44f 5258 	mov.w	r2, #13824	; 0x3600
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8001b2c:	f8d0 3454 	ldr.w	r3, [r0, #1108]	; 0x454
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001b30:	88ce      	ldrh	r6, [r1, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001b32:	890d      	ldrh	r5, [r1, #8]
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8001b34:	f2c0 126e 	movt	r2, #366	; 0x16e
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001b38:	8889      	ldrh	r1, [r1, #4]
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8001b3a:	fbb2 f2f4 	udiv	r2, r2, r4
 8001b3e:	609a      	str	r2, [r3, #8]
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001b40:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001b44:	f441 5204 	orr.w	r2, r1, #8448	; 0x2100
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001b48:	f045 0501 	orr.w	r5, r5, #1
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001b4c:	b2b6      	uxth	r6, r6
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001b4e:	b2ad      	uxth	r5, r5
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001b50:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8001b54:	2400      	movs	r4, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001b56:	611e      	str	r6, [r3, #16]
  (void)u->SR;  /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8001b58:	f401 51a0 	and.w	r1, r1, #5120	; 0x1400
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001b5c:	615d      	str	r5, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001b5e:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8001b60:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8001b62:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8001b64:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
  (void)u->SR;  /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/
 8001b68:	685b      	ldr	r3, [r3, #4]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
    sdp->rxmask = 0x7F;
 8001b6a:	bf0c      	ite	eq
 8001b6c:	237f      	moveq	r3, #127	; 0x7f
  }
  else {
    sdp->rxmask = 0xFF;
 8001b6e:	23ff      	movne	r3, #255	; 0xff
 8001b70:	f880 3458 	strb.w	r3, [r0, #1112]	; 0x458
      nvicEnableVector(STM32_UART8_NUMBER, STM32_SERIAL_UART8_PRIORITY);
    }
#endif
  }
  usart_init(sdp, config);
}
 8001b74:	bc70      	pop	{r4, r5, r6}
 8001b76:	4770      	bx	lr
      rccEnableUSART1(FALSE);
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8001b78:	f640 0318 	movw	r3, #2072	; 0x818
 8001b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b80:	4298      	cmp	r0, r3
 8001b82:	d019      	beq.n	8001bb8 <sd_lld_start+0xa8>
      rccEnableUSART2(FALSE);
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
 8001b84:	f640 4374 	movw	r3, #3188	; 0xc74
 8001b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b8c:	4298      	cmp	r0, r3
 8001b8e:	d1ca      	bne.n	8001b26 <sd_lld_start+0x16>
      rccEnableUSART3(FALSE);
 8001b90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b98:	69d6      	ldr	r6, [r2, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001b9a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001b9e:	f2ce 0300 	movt	r3, #57344	; 0xe000
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001ba2:	2480      	movs	r4, #128	; 0x80
 8001ba4:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001ba8:	25c0      	movs	r5, #192	; 0xc0
 8001baa:	61d6      	str	r6, [r2, #28]
 8001bac:	f883 5327 	strb.w	r5, [r3, #807]	; 0x327
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001bb0:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001bb4:	605c      	str	r4, [r3, #4]
 8001bb6:	e7b6      	b.n	8001b26 <sd_lld_start+0x16>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 8001bb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bbc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bc0:	69d6      	ldr	r6, [r2, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001bc2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001bc6:	f2ce 0300 	movt	r3, #57344	; 0xe000
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001bca:	2440      	movs	r4, #64	; 0x40
 8001bcc:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001bd0:	25c0      	movs	r5, #192	; 0xc0
 8001bd2:	61d6      	str	r6, [r2, #28]
 8001bd4:	f883 5326 	strb.w	r5, [r3, #806]	; 0x326
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001bd8:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001bdc:	605c      	str	r4, [r3, #4]
 8001bde:	e7a2      	b.n	8001b26 <sd_lld_start+0x16>

08001be0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001be0:	b508      	push	{r3, lr}
 8001be2:	4601      	mov	r1, r0
 8001be4:	2320      	movs	r3, #32
 8001be6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8001bea:	2008      	movs	r0, #8
 8001bec:	f7ff fcb8 	bl	8001560 <chSchGoSleepTimeoutS.4375>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f383 8811 	msr	BASEPRI, r3
 8001bf6:	bd08      	pop	{r3, pc}
 8001bf8:	f3af 8000 	nop.w
 8001bfc:	f3af 8000 	nop.w

08001c00 <Thread1.11698>:

/*
 * Blinker thread #1.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8001c00:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8001c02:	f241 3334 	movw	r3, #4916	; 0x1334
 8001c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c0a:	699a      	ldr	r2, [r3, #24]
 8001c0c:	f642 73bc 	movw	r3, #12220	; 0x2fbc
 8001c10:	f6c0 0300 	movt	r3, #2048	; 0x800
  (void)arg;

  chRegSetThreadName("blinker");

  while (true) {
    palSetPad(GPIOD,2); //
 8001c14:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
 8001c18:	2504      	movs	r5, #4
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001c20:	462e      	mov	r6, r5
 8001c22:	6126      	str	r6, [r4, #16]
    chThdSleepMilliseconds(1000);
 8001c24:	f242 7010 	movw	r0, #10000	; 0x2710
 8001c28:	f7ff ffda 	bl	8001be0 <chThdSleep>
    palClearPad(GPIOD, 2); 
 8001c2c:	6165      	str	r5, [r4, #20]
    chThdSleepMilliseconds(1000);
 8001c2e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001c32:	f7ff ffd5 	bl	8001be0 <chThdSleep>
 8001c36:	e7f4      	b.n	8001c22 <Thread1.11698+0x22>
 8001c38:	f3af 8000 	nop.w
 8001c3c:	f3af 8000 	nop.w

08001c40 <chSchWakeupS.constprop.28>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001c40:	b4f0      	push	{r4, r5, r6, r7}
  thread_t *otp = currp;
 8001c42:	f241 3734 	movw	r7, #4916	; 0x1334
 8001c46:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8001c4a:	f8d7 c018 	ldr.w	ip, [r7, #24]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8001c4e:	6885      	ldr	r5, [r0, #8]
 8001c50:	f8dc 4008 	ldr.w	r4, [ip, #8]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8001c54:	2300      	movs	r3, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8001c56:	42a5      	cmp	r5, r4
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001c58:	4606      	mov	r6, r0
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8001c5a:	6243      	str	r3, [r0, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8001c5c:	d80d      	bhi.n	8001c7a <chSchWakeupS.constprop.28+0x3a>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001c5e:	f880 3020 	strb.w	r3, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8001c62:	463b      	mov	r3, r7
  do {
    cp = cp->queue.next;
 8001c64:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	4295      	cmp	r5, r2
 8001c6a:	d9fb      	bls.n	8001c64 <chSchWakeupS.constprop.28+0x24>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8001c6c:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8001c6e:	6033      	str	r3, [r6, #0]
  tp->queue.prev             = cp->queue.prev;
 8001c70:	6072      	str	r2, [r6, #4]
  tp->queue.prev->queue.next = tp;
 8001c72:	6016      	str	r6, [r2, #0]
  cp->queue.prev             = tp;
 8001c74:	605e      	str	r6, [r3, #4]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8001c76:	bcf0      	pop	{r4, r5, r6, r7}
 8001c78:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001c7a:	f88c 3020 	strb.w	r3, [ip, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8001c7e:	463b      	mov	r3, r7
  do {
    cp = cp->queue.next;
 8001c80:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	4294      	cmp	r4, r2
 8001c86:	d9fb      	bls.n	8001c80 <chSchWakeupS.constprop.28+0x40>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8001c88:	685a      	ldr	r2, [r3, #4]
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;
 8001c8a:	2401      	movs	r4, #1
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8001c8c:	f8cc 3000 	str.w	r3, [ip]
  tp->queue.prev             = cp->queue.prev;
 8001c90:	f8cc 2004 	str.w	r2, [ip, #4]
  tp->queue.prev->queue.next = tp;
 8001c94:	f8c2 c000 	str.w	ip, [r2]
  cp->queue.prev             = tp;
 8001c98:	f8c3 c004 	str.w	ip, [r3, #4]
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;
 8001c9c:	f886 4020 	strb.w	r4, [r6, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8001ca0:	4630      	mov	r0, r6
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8001ca2:	61be      	str	r6, [r7, #24]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8001ca4:	4661      	mov	r1, ip
  }
}
 8001ca6:	bcf0      	pop	{r4, r5, r6, r7}
    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8001ca8:	f7fe bad4 	b.w	8000254 <_port_switch>
 8001cac:	f3af 8000 	nop.w

08001cb0 <chTMStartMeasurementX.constprop.24>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001cb8:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8001cba:	6083      	str	r3, [r0, #8]
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop

08001cc0 <sdObjectInit.constprop.17>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8001cc0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}

  sdp->vmt = &vmt;
 8001cc4:	f642 739c 	movw	r3, #12188	; 0x2f9c
 8001cc8:	4604      	mov	r4, r0
 8001cca:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001cce:	f844 3b04 	str.w	r3, [r4], #4
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001cd2:	2700      	movs	r7, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8001cd4:	f500 7315 	add.w	r3, r0, #596	; 0x254
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8001cd8:	f100 0254 	add.w	r2, r0, #84	; 0x54
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
 8001cdc:	f100 060c 	add.w	r6, r0, #12
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
 8001ce0:	f100 0530 	add.w	r5, r0, #48	; 0x30
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8001ce4:	f04f 0901 	mov.w	r9, #1
  oqp->q_counter = size;
 8001ce8:	f44f 7800 	mov.w	r8, #512	; 0x200
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001cec:	f200 4c54 	addw	ip, r0, #1108	; 0x454
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001cf0:	6147      	str	r7, [r0, #20]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8001cf2:	6044      	str	r4, [r0, #4]
 8001cf4:	f880 9008 	strb.w	r9, [r0, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8001cf8:	6287      	str	r7, [r0, #40]	; 0x28
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001cfa:	f8c0 8038 	str.w	r8, [r0, #56]	; 0x38
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001cfe:	60c6      	str	r6, [r0, #12]
  tqp->prev = (thread_t *)tqp;
 8001d00:	6106      	str	r6, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001d02:	6305      	str	r5, [r0, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 8001d04:	6345      	str	r5, [r0, #52]	; 0x34
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8001d06:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8001d08:	64c1      	str	r1, [r0, #76]	; 0x4c
  oqp->q_link    = link;
 8001d0a:	6500      	str	r0, [r0, #80]	; 0x50
  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001d0c:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001d10:	6182      	str	r2, [r0, #24]
  iqp->q_rdptr   = bp;
 8001d12:	6242      	str	r2, [r0, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8001d14:	6202      	str	r2, [r0, #32]
  iqp->q_top     = bp + size;
 8001d16:	61c3      	str	r3, [r0, #28]
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8001d18:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8001d1a:	6483      	str	r3, [r0, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8001d1c:	6443      	str	r3, [r0, #68]	; 0x44
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
 8001d1e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001d22:	4770      	bx	lr
 8001d24:	f3af 8000 	nop.w
 8001d28:	f3af 8000 	nop.w
 8001d2c:	f3af 8000 	nop.w

08001d30 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001d30:	b40e      	push	{r1, r2, r3}
 8001d32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d36:	b092      	sub	sp, #72	; 0x48
 8001d38:	ac0c      	add	r4, sp, #48	; 0x30
 8001d3a:	9403      	str	r4, [sp, #12]
 8001d3c:	9c03      	ldr	r4, [sp, #12]
 8001d3e:	f10d 0c31 	add.w	ip, sp, #49	; 0x31
 8001d42:	ab1b      	add	r3, sp, #108	; 0x6c
 8001d44:	f8cd c008 	str.w	ip, [sp, #8]
 8001d48:	ebc4 0c0c 	rsb	ip, r4, ip
 8001d4c:	f853 6b04 	ldr.w	r6, [r3], #4
 8001d50:	f8cd c01c 	str.w	ip, [sp, #28]
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8001d54:	f642 7ce0 	movw	ip, #12256	; 0x2fe0
 8001d58:	f640 4b74 	movw	fp, #3188	; 0xc74
 8001d5c:	f6c0 0c00 	movt	ip, #2048	; 0x800
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8001d60:	2400      	movs	r4, #0
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d64:	469a      	mov	sl, r3
 8001d66:	f2c2 0b00 	movt	fp, #8192	; 0x2000
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8001d6a:	f8cd c018 	str.w	ip, [sp, #24]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8001d6e:	9404      	str	r4, [sp, #16]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8001d70:	7831      	ldrb	r1, [r6, #0]
 8001d72:	1c73      	adds	r3, r6, #1
    if (c == 0)
 8001d74:	b1a1      	cbz	r1, 8001da0 <chprintf.constprop.0+0x70>
      return n;
    if (c != '%') {
 8001d76:	2925      	cmp	r1, #37	; 0x25
 8001d78:	d018      	beq.n	8001dac <chprintf.constprop.0+0x7c>
      streamPut(chp, (uint8_t)c);
      n++;
 8001d7a:	f8dd c010 	ldr.w	ip, [sp, #16]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8001d7e:	f8db 2000 	ldr.w	r2, [fp]
 8001d82:	f640 4074 	movw	r0, #3188	; 0xc74
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8001d86:	461e      	mov	r6, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
 8001d88:	f10c 0c01 	add.w	ip, ip, #1
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8001d8c:	6892      	ldr	r2, [r2, #8]
 8001d8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
      n++;
 8001d92:	f8cd c010 	str.w	ip, [sp, #16]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8001d96:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8001d98:	7831      	ldrb	r1, [r6, #0]
 8001d9a:	1c73      	adds	r3, r6, #1
    if (c == 0)
 8001d9c:	2900      	cmp	r1, #0
 8001d9e:	d1ea      	bne.n	8001d76 <chprintf.constprop.0+0x46>
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8001da0:	9804      	ldr	r0, [sp, #16]
 8001da2:	b012      	add	sp, #72	; 0x48
 8001da4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da8:	b003      	add	sp, #12
 8001daa:	4770      	bx	lr
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8001dac:	7872      	ldrb	r2, [r6, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8001dae:	2400      	movs	r4, #0
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8001db0:	2a2d      	cmp	r2, #45	; 0x2d
 8001db2:	bf03      	ittte	eq
 8001db4:	78b2      	ldrbeq	r2, [r6, #2]
      fmt++;
 8001db6:	1cb3      	addeq	r3, r6, #2
      left_align = TRUE;
 8001db8:	2701      	moveq	r7, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8001dba:	2700      	movne	r7, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8001dbc:	2a30      	cmp	r2, #48	; 0x30
 8001dbe:	bf03      	ittte	eq
 8001dc0:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8001dc2:	3301      	addeq	r3, #1
      filler = '0';
 8001dc4:	2530      	moveq	r5, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8001dc6:	2520      	movne	r5, #32
    if (*fmt == '0') {
      fmt++;
      filler = '0';
 8001dc8:	461e      	mov	r6, r3
 8001dca:	e008      	b.n	8001dde <chprintf.constprop.0+0xae>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8001dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8001dd0:	f10a 0a04 	add.w	sl, sl, #4
      else
        break;
      width = width * 10 + c;
 8001dd4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001dd8:	7832      	ldrb	r2, [r6, #0]
 8001dda:	eb03 0444 	add.w	r4, r3, r4, lsl #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8001dde:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8001de6:	f106 0601 	add.w	r6, r6, #1
      if (c >= '0' && c <= '9')
 8001dea:	d9f3      	bls.n	8001dd4 <chprintf.constprop.0+0xa4>
        c -= '0';
      else if (c == '*')
 8001dec:	2a2a      	cmp	r2, #42	; 0x2a
 8001dee:	d0ed      	beq.n	8001dcc <chprintf.constprop.0+0x9c>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8001df0:	2a2e      	cmp	r2, #46	; 0x2e
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	d04b      	beq.n	8001e90 <chprintf.constprop.0+0x160>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8001df8:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8001dfc:	294c      	cmp	r1, #76	; 0x4c
 8001dfe:	d156      	bne.n	8001eae <chprintf.constprop.0+0x17e>
      is_long = TRUE;
      if (*fmt)
 8001e00:	7831      	ldrb	r1, [r6, #0]
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
 8001e02:	2001      	movs	r0, #1
      if (*fmt)
 8001e04:	b111      	cbz	r1, 8001e0c <chprintf.constprop.0+0xdc>
        c = *fmt++;
 8001e06:	3601      	adds	r6, #1
 8001e08:	460a      	mov	r2, r1
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
 8001e0a:	2001      	movs	r0, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001e0c:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 8001e10:	2934      	cmp	r1, #52	; 0x34
 8001e12:	f200 8153 	bhi.w	80020bc <chprintf.constprop.0+0x38c>
 8001e16:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001e1a:	00b7      	.short	0x00b7
 8001e1c:	01510151 	.word	0x01510151
 8001e20:	01510151 	.word	0x01510151
 8001e24:	015100b7 	.word	0x015100b7
 8001e28:	01510151 	.word	0x01510151
 8001e2c:	01510151 	.word	0x01510151
 8001e30:	015100b5 	.word	0x015100b5
 8001e34:	01510151 	.word	0x01510151
 8001e38:	01510151 	.word	0x01510151
 8001e3c:	01510052 	.word	0x01510052
 8001e40:	014f0151 	.word	0x014f0151
 8001e44:	01510151 	.word	0x01510151
 8001e48:	01510151 	.word	0x01510151
 8001e4c:	01510151 	.word	0x01510151
 8001e50:	01510151 	.word	0x01510151
 8001e54:	01510151 	.word	0x01510151
 8001e58:	00b70142 	.word	0x00b70142
 8001e5c:	00ec0151 	.word	0x00ec0151
 8001e60:	01510151 	.word	0x01510151
 8001e64:	015100b7 	.word	0x015100b7
 8001e68:	01510151 	.word	0x01510151
 8001e6c:	01510151 	.word	0x01510151
 8001e70:	015100b5 	.word	0x015100b5
 8001e74:	01510151 	.word	0x01510151
 8001e78:	015100c7 	.word	0x015100c7
 8001e7c:	01510052 	.word	0x01510052
 8001e80:	014f0151 	.word	0x014f0151
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8001e84:	f89a 1000 	ldrb.w	r1, [sl]
 8001e88:	f10a 0a04 	add.w	sl, sl, #4
        else
          break;
        precision *= 10;
        precision += c;
 8001e8c:	eb01 0340 	add.w	r3, r1, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8001e90:	f816 2b01 	ldrb.w	r2, [r6], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8001e94:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8001e98:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8001e9c:	b2c9      	uxtb	r1, r1
 8001e9e:	2909      	cmp	r1, #9
 8001ea0:	d9f4      	bls.n	8001e8c <chprintf.constprop.0+0x15c>
          c -= '0';
        else if (c == '*')
 8001ea2:	2a2a      	cmp	r2, #42	; 0x2a
 8001ea4:	d0ee      	beq.n	8001e84 <chprintf.constprop.0+0x154>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8001ea6:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8001eaa:	294c      	cmp	r1, #76	; 0x4c
 8001eac:	d0a8      	beq.n	8001e00 <chprintf.constprop.0+0xd0>
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
 8001eae:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 8001eb2:	b2c0      	uxtb	r0, r0
 8001eb4:	2819      	cmp	r0, #25
 8001eb6:	bf8c      	ite	hi
 8001eb8:	2000      	movhi	r0, #0
 8001eba:	2001      	movls	r0, #1
 8001ebc:	e7a6      	b.n	8001e0c <chprintf.constprop.0+0xdc>

    /* Command decoding.*/
    switch (c) {
 8001ebe:	220a      	movs	r2, #10
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
 8001ec0:	f8da 1000 	ldr.w	r1, [sl]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8001ec4:	a80c      	add	r0, sp, #48	; 0x30
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
 8001ec6:	f10a 0a04 	add.w	sl, sl, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f7ff f9b0 	bl	8001230 <long_to_string_with_divisor.11430.4495>
 8001ed0:	f8dd c00c 	ldr.w	ip, [sp, #12]
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8001ed4:	aa0c      	add	r2, sp, #48	; 0x30
 8001ed6:	ebcc 0000 	rsb	r0, ip, r0
 8001eda:	f100 39ff 	add.w	r9, r0, #4294967295
 8001ede:	9205      	str	r2, [sp, #20]
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8001ee0:	1a24      	subs	r4, r4, r0
 8001ee2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      width = 0;
    if (left_align == FALSE)
 8001ee6:	b9ff      	cbnz	r7, 8001f28 <chprintf.constprop.0+0x1f8>
      width = -width;
 8001ee8:	4264      	negs	r4, r4
    if (width < 0) {
 8001eea:	b1ec      	cbz	r4, 8001f28 <chprintf.constprop.0+0x1f8>
      if (*s == '-' && filler == '0') {
 8001eec:	f8dd c014 	ldr.w	ip, [sp, #20]
        streamPut(chp, (uint8_t)*s++);
 8001ef0:	f640 4874 	movw	r8, #3188	; 0xc74
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8001ef4:	f89c 1000 	ldrb.w	r1, [ip]
 8001ef8:	292d      	cmp	r1, #45	; 0x2d
 8001efa:	f000 80e7 	beq.w	80020cc <chprintf.constprop.0+0x39c>
 8001efe:	f2c2 0800 	movt	r8, #8192	; 0x2000
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8001f02:	4627      	mov	r7, r4
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8001f04:	f8d8 3000 	ldr.w	r3, [r8]
 8001f08:	f640 4074 	movw	r0, #3188	; 0xc74
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f12:	4629      	mov	r1, r5
 8001f14:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8001f16:	3701      	adds	r7, #1
 8001f18:	d1f4      	bne.n	8001f04 <chprintf.constprop.0+0x1d4>
 8001f1a:	f8dd c010 	ldr.w	ip, [sp, #16]
 8001f1e:	ebc4 0c0c 	rsb	ip, r4, ip
 8001f22:	f8cd c010 	str.w	ip, [sp, #16]
 8001f26:	463c      	mov	r4, r7
    }
    while (--i >= 0) {
 8001f28:	f1b9 0f00 	cmp.w	r9, #0
 8001f2c:	db15      	blt.n	8001f5a <chprintf.constprop.0+0x22a>
 8001f2e:	9a05      	ldr	r2, [sp, #20]
 8001f30:	4690      	mov	r8, r2
 8001f32:	1e57      	subs	r7, r2, #1
 8001f34:	44c8      	add	r8, r9
      streamPut(chp, (uint8_t)*s++);
 8001f36:	f8db 3000 	ldr.w	r3, [fp]
 8001f3a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8001f3e:	f640 4074 	movw	r0, #3188	; 0xc74
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f48:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8001f4a:	4547      	cmp	r7, r8
 8001f4c:	d1f3      	bne.n	8001f36 <chprintf.constprop.0+0x206>
 8001f4e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8001f52:	f10c 0301 	add.w	r3, ip, #1
 8001f56:	444b      	add	r3, r9
 8001f58:	9304      	str	r3, [sp, #16]
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8001f5a:	2c00      	cmp	r4, #0
 8001f5c:	f43f af08 	beq.w	8001d70 <chprintf.constprop.0+0x40>
 8001f60:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
 8001f62:	f8db 3000 	ldr.w	r3, [fp]
 8001f66:	f640 4074 	movw	r0, #3188	; 0xc74
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f70:	4629      	mov	r1, r5
 8001f72:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8001f74:	3f01      	subs	r7, #1
 8001f76:	d1f4      	bne.n	8001f62 <chprintf.constprop.0+0x232>
 8001f78:	f8dd c010 	ldr.w	ip, [sp, #16]
 8001f7c:	44a4      	add	ip, r4
 8001f7e:	f8cd c010 	str.w	ip, [sp, #16]
 8001f82:	e6f5      	b.n	8001d70 <chprintf.constprop.0+0x40>
 8001f84:	2208      	movs	r2, #8
 8001f86:	e79b      	b.n	8001ec0 <chprintf.constprop.0+0x190>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
 8001f88:	f8da 1000 	ldr.w	r1, [sl]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8001f8c:	220a      	movs	r2, #10
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
 8001f8e:	2900      	cmp	r1, #0
        *p++ = '-';
 8001f90:	bfb8      	it	lt
 8001f92:	232d      	movlt	r3, #45	; 0x2d
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
 8001f94:	f10a 0a04 	add.w	sl, sl, #4
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
        l = -l;
 8001f98:	bfbd      	ittte	lt
 8001f9a:	4249      	neglt	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8001f9c:	f88d 3030 	strblt.w	r3, [sp, #48]	; 0x30
 8001fa0:	f10d 0031 	addlt.w	r0, sp, #49	; 0x31
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8001fa4:	a80c      	addge	r0, sp, #48	; 0x30
 8001fa6:	e790      	b.n	8001eca <chprintf.constprop.0+0x19a>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8001fa8:	f8da 0000 	ldr.w	r0, [sl]
        s = "(null)";
 8001fac:	f642 72c4 	movw	r2, #12228	; 0x2fc4
 8001fb0:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	bf08      	it	eq
 8001fb8:	4610      	moveq	r0, r2
 8001fba:	9005      	str	r0, [sp, #20]
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8001fbc:	7800      	ldrb	r0, [r0, #0]
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
 8001fbe:	f647 72ff 	movw	r2, #32767	; 0x7fff
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8001fc2:	f10a 0a04 	add.w	sl, sl, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	bf08      	it	eq
 8001fca:	4613      	moveq	r3, r2
      for (p = s; *p && (--precision >= 0); p++)
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	f000 80a1 	beq.w	8002114 <chprintf.constprop.0+0x3e4>
 8001fd2:	9a05      	ldr	r2, [sp, #20]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	e002      	b.n	8001fde <chprintf.constprop.0+0x2ae>
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	f000 808d 	beq.w	80020f8 <chprintf.constprop.0+0x3c8>
 8001fde:	7851      	ldrb	r1, [r2, #1]
 8001fe0:	3201      	adds	r2, #1
 8001fe2:	2900      	cmp	r1, #0
 8001fe4:	d1f8      	bne.n	8001fd8 <chprintf.constprop.0+0x2a8>
 8001fe6:	9b05      	ldr	r3, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8001fe8:	2520      	movs	r5, #32
 8001fea:	1ad0      	subs	r0, r2, r3
 8001fec:	f100 39ff 	add.w	r9, r0, #4294967295
 8001ff0:	e776      	b.n	8001ee0 <chprintf.constprop.0+0x1b0>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8001ff2:	f10a 0a07 	add.w	sl, sl, #7
 8001ff6:	f02a 0a07 	bic.w	sl, sl, #7
 8001ffa:	e9da 0100 	ldrd	r0, r1, [sl]
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	f7fe fd2e 	bl	8000a60 <__aeabi_d2f>
      if (f < 0) {
 8002004:	2100      	movs	r1, #0
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8002006:	4681      	mov	r9, r0
      if (f < 0) {
 8002008:	f7ff f826 	bl	8001058 <__aeabi_fcmplt>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 800200c:	f10a 0a08 	add.w	sl, sl, #8
      if (f < 0) {
 8002010:	9b01      	ldr	r3, [sp, #4]
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8002012:	f10d 0830 	add.w	r8, sp, #48	; 0x30
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
 8002016:	2800      	cmp	r0, #0
 8002018:	d174      	bne.n	8002104 <chprintf.constprop.0+0x3d4>
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 800201a:	f8dd c018 	ldr.w	ip, [sp, #24]
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800201e:	3b01      	subs	r3, #1
 8002020:	2b08      	cmp	r3, #8
 8002022:	bf28      	it	cs
 8002024:	2308      	movcs	r3, #8
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8002026:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]

  l = (long)num;
 800202a:	4648      	mov	r0, r9
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 800202c:	9305      	str	r3, [sp, #20]

  l = (long)num;
 800202e:	f7ff f83b 	bl	80010a8 <__aeabi_f2iz>
 8002032:	4684      	mov	ip, r0
  p = long_to_string_with_divisor(p, l, 10, 0);
 8002034:	220a      	movs	r2, #10
 8002036:	4661      	mov	r1, ip
 8002038:	4640      	mov	r0, r8
 800203a:	2300      	movs	r3, #0
 800203c:	f7ff f8f8 	bl	8001230 <long_to_string_with_divisor.11430.4495>
  *p++ = '.';
 8002040:	232e      	movs	r3, #46	; 0x2e
 8002042:	4680      	mov	r8, r0
 8002044:	f808 3b01 	strb.w	r3, [r8], #1
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8002048:	4648      	mov	r0, r9
 800204a:	f8cd c004 	str.w	ip, [sp, #4]
 800204e:	f7fe fa79 	bl	8000544 <__aeabi_f2d>
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8002052:	f8dd c004 	ldr.w	ip, [sp, #4]
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8002056:	e9cd 0108 	strd	r0, r1, [sp, #32]
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 800205a:	4660      	mov	r0, ip
 800205c:	f7fe fa60 	bl	8000520 <__aeabi_i2d>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002068:	f7fe f90c 	bl	8000284 <__aeabi_dsub>
 800206c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002070:	9805      	ldr	r0, [sp, #20]
 8002072:	f7fe fa45 	bl	8000500 <__aeabi_ui2d>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800207e:	f7fe fab5 	bl	80005ec <__aeabi_dmul>
 8002082:	f7fe fcc5 	bl	8000a10 <__aeabi_d2iz>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8002086:	f64c 43cd 	movw	r3, #52429	; 0xcccd
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 800208a:	4601      	mov	r1, r0
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 800208c:	9805      	ldr	r0, [sp, #20]
 800208e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8002092:	fba3 0300 	umull	r0, r3, r3, r0
 8002096:	220a      	movs	r2, #10
 8002098:	4640      	mov	r0, r8
 800209a:	08db      	lsrs	r3, r3, #3
 800209c:	e716      	b.n	8001ecc <chprintf.constprop.0+0x19c>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 800209e:	f8da 3000 	ldr.w	r3, [sl]
 80020a2:	9807      	ldr	r0, [sp, #28]
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80020a4:	aa0c      	add	r2, sp, #48	; 0x30

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80020a6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 80020aa:	f10a 0a04 	add.w	sl, sl, #4
 80020ae:	f100 39ff 	add.w	r9, r0, #4294967295
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80020b2:	2520      	movs	r5, #32
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80020b4:	9205      	str	r2, [sp, #20]
 80020b6:	e713      	b.n	8001ee0 <chprintf.constprop.0+0x1b0>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80020b8:	2210      	movs	r2, #16
 80020ba:	e701      	b.n	8001ec0 <chprintf.constprop.0+0x190>
 80020bc:	9807      	ldr	r0, [sp, #28]
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80020be:	ab0c      	add	r3, sp, #48	; 0x30
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 80020c0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 80020c4:	f100 39ff 	add.w	r9, r0, #4294967295
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80020c8:	9305      	str	r3, [sp, #20]
 80020ca:	e709      	b.n	8001ee0 <chprintf.constprop.0+0x1b0>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 80020cc:	2d30      	cmp	r5, #48	; 0x30
 80020ce:	f47f af16 	bne.w	8001efe <chprintf.constprop.0+0x1ce>
        streamPut(chp, (uint8_t)*s++);
 80020d2:	f8db 3000 	ldr.w	r3, [fp]
 80020d6:	f2c2 0800 	movt	r8, #8192	; 0x2000
 80020da:	4640      	mov	r0, r8
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	4798      	blx	r3
 80020e0:	9a05      	ldr	r2, [sp, #20]
        n++;
 80020e2:	f8dd c010 	ldr.w	ip, [sp, #16]
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        streamPut(chp, (uint8_t)*s++);
 80020e6:	3201      	adds	r2, #1
        n++;
 80020e8:	f10c 0c01 	add.w	ip, ip, #1
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        streamPut(chp, (uint8_t)*s++);
 80020ec:	9205      	str	r2, [sp, #20]
        n++;
 80020ee:	f8cd c010 	str.w	ip, [sp, #16]
 80020f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80020f6:	e704      	b.n	8001f02 <chprintf.constprop.0+0x1d2>
 80020f8:	9a05      	ldr	r2, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 80020fa:	2520      	movs	r5, #32
 80020fc:	1a98      	subs	r0, r3, r2
 80020fe:	f100 39ff 	add.w	r9, r0, #4294967295
 8002102:	e6ed      	b.n	8001ee0 <chprintf.constprop.0+0x1b0>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8002104:	222d      	movs	r2, #45	; 0x2d
        f = -f;
 8002106:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 800210a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800210e:	f10d 0831 	add.w	r8, sp, #49	; 0x31
 8002112:	e782      	b.n	800201a <chprintf.constprop.0+0x2ea>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002114:	f04f 39ff 	mov.w	r9, #4294967295
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8002118:	2520      	movs	r5, #32
 800211a:	e6e1      	b.n	8001ee0 <chprintf.constprop.0+0x1b0>
 800211c:	f3af 8000 	nop.w

08002120 <icuwidthcb.11704>:
static float distancia = 0.0; //variable que tendrá la distancia de detección del sensor ultrasonido
/*Función callback, llamada al detectarse flanco (subida en este caso), para conseguir el ancho del pulso */
static void icuwidthcb(ICUDriver *icup) {
	
	//osalSysLockFromISR;
  icucnt_t anchoPulso = icuGetWidthX(icup); //llama a funcion para conseguir el ancho del pulso, y retorna en ticks (es un uint16_t)
 8002120:	6902      	ldr	r2, [r0, #16]
  contador = anchoPulso;
 8002122:	f241 2328 	movw	r3, #4648	; 0x1228
static float distancia = 0.0; //variable que tendrá la distancia de detección del sensor ultrasonido
/*Función callback, llamada al detectarse flanco (subida en este caso), para conseguir el ancho del pulso */
static void icuwidthcb(ICUDriver *icup) {
	
	//osalSysLockFromISR;
  icucnt_t anchoPulso = icuGetWidthX(icup); //llama a funcion para conseguir el ancho del pulso, y retorna en ticks (es un uint16_t)
 8002126:	6812      	ldr	r2, [r2, #0]
  contador = anchoPulso;
  
  if(anchoPulso < 30 || anchoPulso > 2400){ //30 corresponde a 5cm y 2400 a 400 cm
 8002128:	f640 1142 	movw	r1, #2370	; 0x942
static float distancia = 0.0; //variable que tendrá la distancia de detección del sensor ultrasonido
/*Función callback, llamada al detectarse flanco (subida en este caso), para conseguir el ancho del pulso */
static void icuwidthcb(ICUDriver *icup) {
	
	//osalSysLockFromISR;
  icucnt_t anchoPulso = icuGetWidthX(icup); //llama a funcion para conseguir el ancho del pulso, y retorna en ticks (es un uint16_t)
 800212c:	1c50      	adds	r0, r2, #1
  contador = anchoPulso;
  
  if(anchoPulso < 30 || anchoPulso > 2400){ //30 corresponde a 5cm y 2400 a 400 cm
 800212e:	3a1d      	subs	r2, #29
/*Función callback, llamada al detectarse flanco (subida en este caso), para conseguir el ancho del pulso */
static void icuwidthcb(ICUDriver *icup) {
	
	//osalSysLockFromISR;
  icucnt_t anchoPulso = icuGetWidthX(icup); //llama a funcion para conseguir el ancho del pulso, y retorna en ticks (es un uint16_t)
  contador = anchoPulso;
 8002130:	f2c2 0300 	movt	r3, #8192	; 0x2000
  
  if(anchoPulso < 30 || anchoPulso > 2400){ //30 corresponde a 5cm y 2400 a 400 cm
 8002134:	428a      	cmp	r2, r1

static int contador = 0;
static int lectura = 0; 
static float distancia = 0.0; //variable que tendrá la distancia de detección del sensor ultrasonido
/*Función callback, llamada al detectarse flanco (subida en este caso), para conseguir el ancho del pulso */
static void icuwidthcb(ICUDriver *icup) {
 8002136:	b510      	push	{r4, lr}
	
	//osalSysLockFromISR;
  icucnt_t anchoPulso = icuGetWidthX(icup); //llama a funcion para conseguir el ancho del pulso, y retorna en ticks (es un uint16_t)
  contador = anchoPulso;
 8002138:	6018      	str	r0, [r3, #0]
  
  if(anchoPulso < 30 || anchoPulso > 2400){ //30 corresponde a 5cm y 2400 a 400 cm
 800213a:	d906      	bls.n	800214a <icuwidthcb.11704+0x2a>
  	distancia=0;
 800213c:	f241 3330 	movw	r3, #4912	; 0x1330
 8002140:	2200      	movs	r2, #0
 8002142:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	bd10      	pop	{r4, pc}
  }else{
		distancia = (SPEED_OF_SOUND * anchoPulso * M_TO_CM) / (100000 * 2); //100000 pues es la frec. colocada en ICUConfig icu2cfg
 800214a:	f7fe fd8f 	bl	8000c6c <__aeabi_ui2f>
 800214e:	f649 119a 	movw	r1, #39322	; 0x999a
 8002152:	f2c4 31ab 	movt	r1, #17323	; 0x43ab
 8002156:	f7fe fde1 	bl	8000d1c <__aeabi_fmul>
 800215a:	2100      	movs	r1, #0
 800215c:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
 8002160:	f7fe fddc 	bl	8000d1c <__aeabi_fmul>
 8002164:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8002168:	f6c4 0143 	movt	r1, #18499	; 0x4843
 800216c:	f7fe fe8a 	bl	8000e84 <__aeabi_fdiv>
 8002170:	f241 3230 	movw	r2, #4912	; 0x1330
		lectura = 1;
 8002174:	f241 33ac 	movw	r3, #5036	; 0x13ac
  contador = anchoPulso;
  
  if(anchoPulso < 30 || anchoPulso > 2400){ //30 corresponde a 5cm y 2400 a 400 cm
  	distancia=0;
  }else{
		distancia = (SPEED_OF_SOUND * anchoPulso * M_TO_CM) / (100000 * 2); //100000 pues es la frec. colocada en ICUConfig icu2cfg
 8002178:	f2c2 0200 	movt	r2, #8192	; 0x2000
		lectura = 1;
 800217c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002180:	2101      	movs	r1, #1
  contador = anchoPulso;
  
  if(anchoPulso < 30 || anchoPulso > 2400){ //30 corresponde a 5cm y 2400 a 400 cm
  	distancia=0;
  }else{
		distancia = (SPEED_OF_SOUND * anchoPulso * M_TO_CM) / (100000 * 2); //100000 pues es la frec. colocada en ICUConfig icu2cfg
 8002182:	6010      	str	r0, [r2, #0]
		lectura = 1;
 8002184:	6019      	str	r1, [r3, #0]
		chprintf( (BaseChannel *)&SD3, "distancia %f cm\n\r", distancia);
 8002186:	f7fe f9dd 	bl	8000544 <__aeabi_f2d>
  }
  //osalSysUnlockFromISR;
};
 800218a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(anchoPulso < 30 || anchoPulso > 2400){ //30 corresponde a 5cm y 2400 a 400 cm
  	distancia=0;
  }else{
		distancia = (SPEED_OF_SOUND * anchoPulso * M_TO_CM) / (100000 * 2); //100000 pues es la frec. colocada en ICUConfig icu2cfg
		lectura = 1;
		chprintf( (BaseChannel *)&SD3, "distancia %f cm\n\r", distancia);
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	f640 4074 	movw	r0, #3188	; 0xc74
 8002196:	f642 71cc 	movw	r1, #12236	; 0x2fcc
 800219a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800219e:	f6c0 0100 	movt	r1, #2048	; 0x800
 80021a2:	f7ff bdc5 	b.w	8001d30 <chprintf.constprop.0>
 80021a6:	bf00      	nop
 80021a8:	f3af 8000 	nop.w
 80021ac:	f3af 8000 	nop.w

080021b0 <chTMStopMeasurementX>:
 80021b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021b4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80021b8:	f241 3334 	movw	r3, #4916	; 0x1334
 80021bc:	6851      	ldr	r1, [r2, #4]
 80021be:	f2c2 0300 	movt	r3, #8192	; 0x2000
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80021c2:	6882      	ldr	r2, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80021c4:	b430      	push	{r4, r5}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80021c6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80021c8:	1a89      	subs	r1, r1, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80021ca:	68c3      	ldr	r3, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 80021cc:	1b09      	subs	r1, r1, r4

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80021ce:	1c5d      	adds	r5, r3, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80021d0:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80021d4:	1852      	adds	r2, r2, r1
  if (tmp->last > tmp->worst) {
 80021d6:	6844      	ldr	r4, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80021d8:	f143 0300 	adc.w	r3, r3, #0
 80021dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 80021e0:	6803      	ldr	r3, [r0, #0]
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 80021e2:	42a1      	cmp	r1, r4
    tmp->worst = tmp->last;
 80021e4:	bf88      	it	hi
 80021e6:	6041      	strhi	r1, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 80021e8:	4299      	cmp	r1, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80021ea:	60c5      	str	r5, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 80021ec:	6081      	str	r1, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 80021ee:	bf38      	it	cc
 80021f0:	6001      	strcc	r1, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80021f2:	bc30      	pop	{r4, r5}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	f3af 8000 	nop.w
 80021fc:	f3af 8000 	nop.w

08002200 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8002200:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8002202:	f241 3334 	movw	r3, #4916	; 0x1334
 8002206:	6881      	ldr	r1, [r0, #8]
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8002208:	b410      	push	{r4}
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.queue;
 800220a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 800220e:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8002210:	f880 2020 	strb.w	r2, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 8002214:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	428a      	cmp	r2, r1
 800221a:	d2fb      	bcs.n	8002214 <chSchReadyI+0x14>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 800221c:	685a      	ldr	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
  cp->queue.prev             = tp;

  return tp;
}
 800221e:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8002220:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8002222:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8002224:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002226:	605c      	str	r4, [r3, #4]

  return tp;
}
 8002228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop

08002230 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	4602      	mov	r2, r0
 8002234:	2320      	movs	r3, #32
 8002236:	f383 8811 	msr	BASEPRI, r3
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 800223a:	f241 3334 	movw	r3, #4916	; 0x1334
 800223e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002242:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8002244:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8002246:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800224a:	42a8      	cmp	r0, r5
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 800224c:	6262      	str	r2, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 800224e:	d006      	beq.n	800225e <chThdExit+0x2e>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->next;
  tlp->next = tp->queue.next;
 8002250:	6803      	ldr	r3, [r0, #0]
 8002252:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8002254:	f7ff ffd4 	bl	8002200 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8002258:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 800225a:	42a8      	cmp	r0, r5
 800225c:	d1f8      	bne.n	8002250 <chThdExit+0x20>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 800225e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002262:	b94b      	cbnz	r3, 8002278 <chThdExit+0x48>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8002264:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8002268:	079d      	lsls	r5, r3, #30
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 800226a:	bf01      	itttt	eq
 800226c:	6922      	ldreq	r2, [r4, #16]
 800226e:	6963      	ldreq	r3, [r4, #20]
 8002270:	611a      	streq	r2, [r3, #16]
 8002272:	6922      	ldreq	r2, [r4, #16]
 8002274:	bf08      	it	eq
 8002276:	6153      	streq	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8002278:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 800227a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 800227e:	f7ff b957 	b.w	8001530 <chSchGoSleepS.4535>
 8002282:	bf00      	nop
 8002284:	f3af 8000 	nop.w
 8002288:	f3af 8000 	nop.w
 800228c:	f3af 8000 	nop.w

08002290 <chEvtBroadcastFlagsI.4524>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8002292:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8002294:	4607      	mov	r7, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002296:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8002298:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800229a:	d020      	beq.n	80022de <chEvtBroadcastFlagsI.4524+0x4e>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800229c:	2600      	movs	r6, #0
 800229e:	e002      	b.n	80022a6 <chEvtBroadcastFlagsI.4524+0x16>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 80022a0:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80022a2:	42a7      	cmp	r7, r4
 80022a4:	d01b      	beq.n	80022de <chEvtBroadcastFlagsI.4524+0x4e>
  /*lint -restore*/
    elp->flags |= flags;
 80022a6:	68e3      	ldr	r3, [r4, #12]
 80022a8:	432b      	orrs	r3, r5
 80022aa:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80022ac:	b115      	cbz	r5, 80022b4 <chEvtBroadcastFlagsI.4524+0x24>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 80022ae:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80022b0:	4213      	tst	r3, r2
 80022b2:	d0f5      	beq.n	80022a0 <chEvtBroadcastFlagsI.4524+0x10>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
 80022b4:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 80022b6:	68a2      	ldr	r2, [r4, #8]
 80022b8:	6b41      	ldr	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80022ba:	f890 3020 	ldrb.w	r3, [r0, #32]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 80022be:	430a      	orrs	r2, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80022c0:	2b0a      	cmp	r3, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 80022c2:	6342      	str	r2, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80022c4:	d00c      	beq.n	80022e0 <chEvtBroadcastFlagsI.4524+0x50>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80022c6:	2b0b      	cmp	r3, #11
 80022c8:	d1ea      	bne.n	80022a0 <chEvtBroadcastFlagsI.4524+0x10>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80022ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022cc:	401a      	ands	r2, r3

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d1e6      	bne.n	80022a0 <chEvtBroadcastFlagsI.4524+0x10>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 80022d2:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80022d4:	f7ff ff94 	bl	8002200 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 80022d8:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80022da:	42a7      	cmp	r7, r4
 80022dc:	d1e3      	bne.n	80022a6 <chEvtBroadcastFlagsI.4524+0x16>
 80022de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80022e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80022e2:	421a      	tst	r2, r3
 80022e4:	d0dc      	beq.n	80022a0 <chEvtBroadcastFlagsI.4524+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 80022e6:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80022e8:	f7ff ff8a 	bl	8002200 <chSchReadyI>
 80022ec:	e7f4      	b.n	80022d8 <chEvtBroadcastFlagsI.4524+0x48>
 80022ee:	bf00      	nop

080022f0 <serve_interrupt.8769.4243>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 80022f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80022f4:	f8d0 6454 	ldr.w	r6, [r0, #1108]	; 0x454
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 80022f8:	4605      	mov	r5, r0
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
 80022fa:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 80022fe:	6833      	ldr	r3, [r6, #0]
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8002300:	b082      	sub	sp, #8
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8002302:	05d8      	lsls	r0, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8002304:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8002306:	f100 8089 	bmi.w	800241c <serve_interrupt.8769.4243+0x12c>
 800230a:	2320      	movs	r3, #32
 800230c:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002310:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002314:	d050      	beq.n	80023b8 <serve_interrupt.8769.4243+0xc8>
    sts |= SD_PARITY_ERROR;
  if (sr & USART_SR_FE)
    sts |= SD_FRAMING_ERROR;
  if (sr & USART_SR_NE)
    sts |= SD_NOISE_ERROR;
  chnAddFlagsI(sdp, sts);
 8002316:	f105 0c04 	add.w	ip, r5, #4
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
  }

  osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 800231a:	f105 070c 	add.w	r7, r5, #12

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800231e:	f04f 0800 	mov.w	r8, #0
 8002322:	e009      	b.n	8002338 <serve_interrupt.8769.4243+0x48>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 8002324:	06a2      	lsls	r2, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 8002326:	6873      	ldr	r3, [r6, #4]
 8002328:	f895 a458 	ldrb.w	sl, [r5, #1112]	; 0x458
    if (sr & USART_SR_RXNE)
 800232c:	d41f      	bmi.n	800236e <serve_interrupt.8769.4243+0x7e>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800232e:	6834      	ldr	r4, [r6, #0]
 8002330:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002332:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002336:	d03f      	beq.n	80023b8 <serve_interrupt.8769.4243+0xc8>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8002338:	0721      	lsls	r1, r4, #28
 800233a:	d0f3      	beq.n	8002324 <serve_interrupt.8769.4243+0x34>
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;
 800233c:	f014 0f08 	tst.w	r4, #8
 8002340:	bf14      	ite	ne
 8002342:	2180      	movne	r1, #128	; 0x80
 8002344:	2100      	moveq	r1, #0

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
  if (sr & USART_SR_PE)
 8002346:	07e2      	lsls	r2, r4, #31
    sts |= SD_PARITY_ERROR;
 8002348:	bf48      	it	mi
 800234a:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 800234e:	07a3      	lsls	r3, r4, #30
    sts |= SD_FRAMING_ERROR;
 8002350:	bf48      	it	mi
 8002352:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8002356:	0760      	lsls	r0, r4, #29
    sts |= SD_NOISE_ERROR;
 8002358:	bf48      	it	mi
 800235a:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800235e:	4660      	mov	r0, ip
 8002360:	f7ff ff96 	bl	8002290 <chEvtBroadcastFlagsI.4524>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 8002364:	06a2      	lsls	r2, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 8002366:	6873      	ldr	r3, [r6, #4]
 8002368:	f895 a458 	ldrb.w	sl, [r5, #1112]	; 0x458
    if (sr & USART_SR_RXNE)
 800236c:	d5df      	bpl.n	800232e <serve_interrupt.8769.4243+0x3e>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800236e:	696a      	ldr	r2, [r5, #20]
 8002370:	2a00      	cmp	r2, #0
 8002372:	d040      	beq.n	80023f6 <serve_interrupt.8769.4243+0x106>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 8002374:	6a2a      	ldr	r2, [r5, #32]
 8002376:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002378:	428a      	cmp	r2, r1
 800237a:	d046      	beq.n	800240a <serve_interrupt.8769.4243+0x11a>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 800237c:	6968      	ldr	r0, [r5, #20]
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 800237e:	ea0a 0303 	and.w	r3, sl, r3
  *iqp->q_wrptr++ = b;
 8002382:	1c51      	adds	r1, r2, #1

  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8002384:	3001      	adds	r0, #1
  *iqp->q_wrptr++ = b;
 8002386:	6229      	str	r1, [r5, #32]

  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8002388:	6168      	str	r0, [r5, #20]
  *iqp->q_wrptr++ = b;
 800238a:	7013      	strb	r3, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 800238c:	6a2a      	ldr	r2, [r5, #32]
 800238e:	69eb      	ldr	r3, [r5, #28]
 8002390:	429a      	cmp	r2, r3
 8002392:	d301      	bcc.n	8002398 <serve_interrupt.8769.4243+0xa8>
    iqp->q_wrptr = iqp->q_buffer;
 8002394:	69ab      	ldr	r3, [r5, #24]
 8002396:	622b      	str	r3, [r5, #32]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8002398:	68eb      	ldr	r3, [r5, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 800239a:	429f      	cmp	r7, r3
 800239c:	d0c7      	beq.n	800232e <serve_interrupt.8769.4243+0x3e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 800239e:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 80023a0:	4618      	mov	r0, r3
 80023a2:	60ea      	str	r2, [r5, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 80023a4:	6057      	str	r7, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80023a6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80023aa:	f7ff ff29 	bl	8002200 <chSchReadyI>
    if (sr & USART_SR_RXNE)
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 80023ae:	6834      	ldr	r4, [r6, #0]
 80023b0:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80023b2:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80023b6:	d1bf      	bne.n	8002338 <serve_interrupt.8769.4243+0x48>
 80023b8:	2300      	movs	r3, #0
 80023ba:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80023be:	f019 0f80 	tst.w	r9, #128	; 0x80
 80023c2:	d001      	beq.n	80023c8 <serve_interrupt.8769.4243+0xd8>
 80023c4:	0623      	lsls	r3, r4, #24
 80023c6:	d438      	bmi.n	800243a <serve_interrupt.8769.4243+0x14a>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 80023c8:	0667      	lsls	r7, r4, #25
 80023ca:	d511      	bpl.n	80023f0 <serve_interrupt.8769.4243+0x100>
 80023cc:	2320      	movs	r3, #32
 80023ce:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 80023d2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80023d4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d055      	beq.n	8002486 <serve_interrupt.8769.4243+0x196>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80023da:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80023de:	ea09 0303 	and.w	r3, r9, r3
    u->SR = ~USART_SR_TC;
 80023e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80023e6:	60f3      	str	r3, [r6, #12]
 80023e8:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 80023ea:	6032      	str	r2, [r6, #0]
 80023ec:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }
}
 80023f0:	b002      	add	sp, #8
 80023f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023f6:	2104      	movs	r1, #4
 80023f8:	4660      	mov	r0, ip
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	f7ff ff48 	bl	8002290 <chEvtBroadcastFlagsI.4524>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 8002400:	6a2a      	ldr	r2, [r5, #32]
 8002402:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002404:	9b01      	ldr	r3, [sp, #4]
 8002406:	428a      	cmp	r2, r1
 8002408:	d1b8      	bne.n	800237c <serve_interrupt.8769.4243+0x8c>
 800240a:	6969      	ldr	r1, [r5, #20]
 800240c:	2900      	cmp	r1, #0
 800240e:	d0b5      	beq.n	800237c <serve_interrupt.8769.4243+0x8c>
 8002410:	4660      	mov	r0, ip
 8002412:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002416:	f7ff ff3b 	bl	8002290 <chEvtBroadcastFlagsI.4524>
 800241a:	e788      	b.n	800232e <serve_interrupt.8769.4243+0x3e>
 800241c:	2320      	movs	r3, #32
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002426:	1d28      	adds	r0, r5, #4
 8002428:	f7ff ff32 	bl	8002290 <chEvtBroadcastFlagsI.4524>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 800242c:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8002430:	6033      	str	r3, [r6, #0]
 8002432:	2300      	movs	r3, #0
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	e767      	b.n	800230a <serve_interrupt.8769.4243+0x1a>
 800243a:	2320      	movs	r3, #32
 800243c:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8002440:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002442:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8002444:	429a      	cmp	r2, r3
 8002446:	d026      	beq.n	8002496 <serve_interrupt.8769.4243+0x1a6>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8002448:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800244a:	6c29      	ldr	r1, [r5, #64]	; 0x40
  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800244c:	1c5a      	adds	r2, r3, #1

  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 800244e:	3001      	adds	r0, #1
 8002450:	63a8      	str	r0, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8002452:	64aa      	str	r2, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8002454:	428a      	cmp	r2, r1
  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8002456:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8002458:	d301      	bcc.n	800245e <serve_interrupt.8769.4243+0x16e>
    oqp->q_rdptr = oqp->q_buffer;
 800245a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800245c:	64ab      	str	r3, [r5, #72]	; 0x48
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 800245e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }

  osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 8002460:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8002464:	429a      	cmp	r2, r3
 8002466:	d009      	beq.n	800247c <serve_interrupt.8769.4243+0x18c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8002468:	6819      	ldr	r1, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800246a:	f04f 0e00 	mov.w	lr, #0
 800246e:	6329      	str	r1, [r5, #48]	; 0x30
  (void) chSchReadyI(tp);
 8002470:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8002472:	604a      	str	r2, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8002474:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002478:	f7ff fec2 	bl	8002200 <chSchReadyI>
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 800247c:	6077      	str	r7, [r6, #4]
 800247e:	2300      	movs	r3, #0
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	e7a0      	b.n	80023c8 <serve_interrupt.8769.4243+0xd8>
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 8002486:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0a6      	beq.n	80023da <serve_interrupt.8769.4243+0xea>
 800248c:	1d28      	adds	r0, r5, #4
 800248e:	2110      	movs	r1, #16
 8002490:	f7ff fefe 	bl	8002290 <chEvtBroadcastFlagsI.4524>
 8002494:	e7a1      	b.n	80023da <serve_interrupt.8769.4243+0xea>
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8002496:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002498:	2a00      	cmp	r2, #0
 800249a:	d0d5      	beq.n	8002448 <serve_interrupt.8769.4243+0x158>
 800249c:	1d28      	adds	r0, r5, #4
 800249e:	2108      	movs	r1, #8
 80024a0:	f7ff fef6 	bl	8002290 <chEvtBroadcastFlagsI.4524>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 80024a4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80024a8:	ea09 0303 	and.w	r3, r9, r3
 80024ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024b0:	60f3      	str	r3, [r6, #12]
 80024b2:	e7e4      	b.n	800247e <serve_interrupt.8769.4243+0x18e>
 80024b4:	f3af 8000 	nop.w
 80024b8:	f3af 8000 	nop.w
 80024bc:	f3af 8000 	nop.w

080024c0 <VectorDC.4238>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 80024c0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);
 80024c2:	f640 4074 	movw	r0, #3188	; 0xc74
 80024c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80024ca:	f7ff ff11 	bl	80022f0 <serve_interrupt.8769.4243>

  OSAL_IRQ_EPILOGUE();
}
 80024ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
 80024d2:	f7fe bef5 	b.w	80012c0 <_port_irq_epilogue.4507>
 80024d6:	bf00      	nop
 80024d8:	f3af 8000 	nop.w
 80024dc:	f3af 8000 	nop.w

080024e0 <VectorD8.4241>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80024e0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);
 80024e2:	f640 0018 	movw	r0, #2072	; 0x818
 80024e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80024ea:	f7ff ff01 	bl	80022f0 <serve_interrupt.8769.4243>

  OSAL_IRQ_EPILOGUE();
}
 80024ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 80024f2:	f7fe bee5 	b.w	80012c0 <_port_irq_epilogue.4507>
 80024f6:	bf00      	nop
 80024f8:	f3af 8000 	nop.w
 80024fc:	f3af 8000 	nop.w

08002500 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8002500:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002504:	2500      	movs	r5, #0
 8002506:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800250a:	f04f 30ff 	mov.w	r0, #4294967295
 800250e:	6923      	ldr	r3, [r4, #16]
 * Application entry point.
 */
 static BaseChannel * chan = (BaseChannel *)&SD3;
 static BaseChannel * chan2 = (BaseChannel *)&SD2;

int main(void) {
 8002510:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002514:	6120      	str	r0, [r4, #16]
 8002516:	6125      	str	r5, [r4, #16]
  rccResetAPB2(0xFFFFFFFF);
 8002518:	68e3      	ldr	r3, [r4, #12]
 800251a:	60e0      	str	r0, [r4, #12]
 800251c:	60e5      	str	r5, [r4, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800251e:	69e2      	ldr	r2, [r4, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002520:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8002524:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002528:	61e2      	str	r2, [r4, #28]
  rccEnableBKPInterface(FALSE);
 800252a:	69e2      	ldr	r2, [r4, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800252c:	f2c4 0300 	movt	r3, #16384	; 0x4000
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
  rccEnableBKPInterface(FALSE);
 8002530:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002534:	61e2      	str	r2, [r4, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	b0ad      	sub	sp, #180	; 0xb4
 800253a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800253e:	601a      	str	r2, [r3, #0]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8002540:	69a3      	ldr	r3, [r4, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8002542:	f44f 6000 	mov.w	r0, #2048	; 0x800
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8002546:	f043 077d 	orr.w	r7, r3, #125	; 0x7d
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 800254a:	f644 3383 	movw	r3, #19331	; 0x4b83
 800254e:	f2c4 33b3 	movt	r3, #17331	; 0x43b3
 8002552:	9308      	str	r3, [sp, #32]
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 8002554:	f648 0388 	movw	r3, #34952	; 0x8888
 8002558:	f2cb 43b3 	movt	r3, #46259	; 0xb4b3
 800255c:	9303      	str	r3, [sp, #12]
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 800255e:	f644 3343 	movw	r3, #19267	; 0x4b43
 8002562:	f6c8 0388 	movt	r3, #34952	; 0x8888
 8002566:	9304      	str	r3, [sp, #16]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8002568:	f648 0344 	movw	r3, #34884	; 0x8844
 800256c:	f6c8 0388 	movt	r3, #34952	; 0x8888
 8002570:	9305      	str	r3, [sp, #20]
 */
void gpt_lld_init(void) {

#if STM32_GPT_USE_TIM1
  /* Driver initialization.*/
  GPTD1.tim = STM32_TIM1;
 8002572:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002576:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800257a:	9306      	str	r3, [sp, #24]
#endif

#if STM32_ICU_USE_TIM3
  /* Driver initialization.*/
  icuObjectInit(&ICUD3);
  ICUD3.tim = STM32_TIM3;
 800257c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002580:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002584:	9307      	str	r3, [sp, #28]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8002586:	f248 49b8 	movw	r9, #33976	; 0x84b8
  GPIOA->CRL = config->PAData.crl;
 800258a:	9b08      	ldr	r3, [sp, #32]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 800258c:	61a7      	str	r7, [r4, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 800258e:	f2c4 0001 	movt	r0, #16385	; 0x4001
  GPIOA->CRH = config->PAData.crh;
 8002592:	f6c8 0988 	movt	r9, #34952	; 0x8888
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8002596:	f04f 37ff 	mov.w	r7, #4294967295
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 800259a:	f44f 6e40 	mov.w	lr, #3072	; 0xc00
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 800259e:	60c7      	str	r7, [r0, #12]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 80025a0:	f2c4 0e01 	movt	lr, #16385	; 0x4001

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80025a4:	f8c0 9004 	str.w	r9, [r0, #4]
  GPIOA->CRL = config->PAData.crl;
 80025a8:	6003      	str	r3, [r0, #0]
  GPIOB->ODR = config->PBData.odr;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	f8ce 300c 	str.w	r3, [lr, #12]
  GPIOB->CRH = config->PBData.crh;
 80025b2:	9b03      	ldr	r3, [sp, #12]
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80025b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 80025b8:	f8ce 3004 	str.w	r3, [lr, #4]
  GPIOB->CRL = config->PBData.crl;
 80025bc:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 80025c0:	f8ce 3000 	str.w	r3, [lr]
  GPIOC->ODR = config->PCData.odr;
 80025c4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80025c8:	f46f 7340 	mvn.w	r3, #768	; 0x300
 80025cc:	60d3      	str	r3, [r2, #12]
  GPIOC->CRH = config->PCData.crh;
 80025ce:	9b04      	ldr	r3, [sp, #16]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 80025d0:	f44f 5aa0 	mov.w	sl, #5120	; 0x1400
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 80025d4:	6053      	str	r3, [r2, #4]
  GPIOC->CRL = config->PCData.crl;
 80025d6:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
  GPIOD->ODR = config->PDData.odr;
 80025da:	f2c4 0a01 	movt	sl, #16385	; 0x4001
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
 80025de:	6013      	str	r3, [r2, #0]
  GPIOD->ODR = config->PDData.odr;
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295
 80025e4:	f8ca 200c 	str.w	r2, [sl, #12]
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80025e8:	f44f 5cc0 	mov.w	ip, #6144	; 0x1800
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
 80025ec:	f8ca 3004 	str.w	r3, [sl, #4]
  GPIOD->CRL = config->PDData.crl;
 80025f0:	9b05      	ldr	r3, [sp, #20]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80025f2:	f2c4 0c01 	movt	ip, #16385	; 0x4001
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 80025f6:	f8ca 3000 	str.w	r3, [sl]
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 80025fa:	f640 0b18 	movw	fp, #2072	; 0x818
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80025fe:	f8cc 200c 	str.w	r2, [ip, #12]
  GPIOE->CRH = config->PEData.crh;
 8002602:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002606:	f8cc 2004 	str.w	r2, [ip, #4]
 800260a:	9b06      	ldr	r3, [sp, #24]
  GPIOE->CRL = config->PEData.crl;
 800260c:	f8cc 2000 	str.w	r2, [ip]
 8002610:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 8002614:	9a07      	ldr	r2, [sp, #28]
 8002616:	f241 08d0 	movw	r8, #4304	; 0x10d0
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800261a:	f640 0600 	movw	r6, #2048	; 0x800
 800261e:	f241 21a1 	movw	r1, #4769	; 0x12a1
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8002622:	2701      	movs	r7, #1
 8002624:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8002628:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800262c:	4658      	mov	r0, fp
 800262e:	f6c0 0100 	movt	r1, #2048	; 0x800
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 8002632:	f640 4974 	movw	r9, #3188	; 0xc74
 8002636:	60f2      	str	r2, [r6, #12]
 8002638:	f2c2 0900 	movt	r9, #8192	; 0x2000
 800263c:	f8c8 300c 	str.w	r3, [r8, #12]
 8002640:	f888 7000 	strb.w	r7, [r8]
 8002644:	7037      	strb	r7, [r6, #0]
  gptp->config = NULL;
 8002646:	f8c8 5004 	str.w	r5, [r8, #4]
  icup->config = NULL;
 800264a:	6075      	str	r5, [r6, #4]
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 800264c:	f7ff fb38 	bl	8001cc0 <sdObjectInit.constprop.17>
  SD2.usart = USART2;
 8002650:	f44f 4388 	mov.w	r3, #17408	; 0x4400
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 8002654:	f241 2181 	movw	r1, #4737	; 0x1281
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8002658:	f2c4 0300 	movt	r3, #16384	; 0x4000
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 800265c:	4648      	mov	r0, r9
 800265e:	f6c0 0100 	movt	r1, #2048	; 0x800
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8002662:	f8cb 3454 	str.w	r3, [fp, #1108]	; 0x454
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 8002666:	f7ff fb2b 	bl	8001cc0 <sdObjectInit.constprop.17>
void boardInit(void) {
	
  /*
     USART3 re-mapped to PC10-PC11
  */
  AFIO -> MAPR |= AFIO_MAPR_USART3_REMAP_PARTIALREMAP;
 800266a:	462b      	mov	r3, r5
 800266c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002670:	6859      	ldr	r1, [r3, #4]
  SD3.usart = USART3;
 8002672:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8002676:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800267a:	f041 0110 	orr.w	r1, r1, #16
 800267e:	f8c9 2454 	str.w	r2, [r9, #1108]	; 0x454
 8002682:	6059      	str	r1, [r3, #4]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002684:	69e3      	ldr	r3, [r4, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002686:	f44f 5100 	mov.w	r1, #8192	; 0x2000

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800268a:	433b      	orrs	r3, r7
 800268c:	61e3      	str	r3, [r4, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800268e:	f2ce 0104 	movt	r1, #57348	; 0xe004
 8002692:	684b      	ldr	r3, [r1, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002694:	f64f 7cff 	movw	ip, #65535	; 0xffff

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002698:	f443 6a00 	orr.w	sl, r3, #2048	; 0x800

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800269c:	f640 105f 	movw	r0, #2399	; 0x95f
 80026a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80026a4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80026a8:	f241 3434 	movw	r4, #4916	; 0x1334
 80026ac:	f2c2 0400 	movt	r4, #8192	; 0x2000

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80026b0:	f8c1 a004 	str.w	sl, [r1, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026b4:	f04f 5e80 	mov.w	lr, #268435456	; 0x10000000

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80026b8:	6298      	str	r0, [r3, #40]	; 0x28

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80026ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80026be:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
 80026c2:	f04f 0980 	mov.w	r9, #128	; 0x80
  STM32_ST_TIM->CCMR1  = 0;
 80026c6:	619d      	str	r5, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80026c8:	635d      	str	r5, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80026ca:	60dd      	str	r5, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 80026cc:	605d      	str	r5, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80026ce:	615f      	str	r7, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80026d0:	601f      	str	r7, [r3, #0]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	f882 931c 	strb.w	r9, [r2, #796]	; 0x31c
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80026da:	f104 011c 	add.w	r1, r4, #28
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026de:	f8c2 e180 	str.w	lr, [r2, #384]	; 0x180
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80026e2:	a80c      	add	r0, sp, #48	; 0x30
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80026e4:	f8c2 e000 	str.w	lr, [r2]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80026e8:	2200      	movs	r2, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80026ea:	930c      	str	r3, [sp, #48]	; 0x30
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
 80026ec:	84a3      	strh	r3, [r4, #36]	; 0x24
 80026ee:	6024      	str	r4, [r4, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80026f0:	2300      	movs	r3, #0
  tqp->prev = (thread_t *)tqp;
 80026f2:	6064      	str	r4, [r4, #4]
 80026f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80026f8:	61e1      	str	r1, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80026fa:	6221      	str	r1, [r4, #32]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 80026fc:	60a5      	str	r5, [r4, #8]
  ch.vtlist.delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 80026fe:	84e5      	strh	r5, [r4, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8002700:	6725      	str	r5, [r4, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8002702:	950d      	str	r5, [sp, #52]	; 0x34
  tmp->last       = (rtcnt_t)0;
 8002704:	950e      	str	r5, [sp, #56]	; 0x38
  tmp->n          = (ucnt_t)0;
 8002706:	950f      	str	r5, [sp, #60]	; 0x3c
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8002708:	6124      	str	r4, [r4, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 800270a:	6164      	str	r4, [r4, #20]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800270c:	f7ff fad0 	bl	8001cb0 <chTMStartMeasurementX.constprop.24>
  chTMStopMeasurementX(&tm);
 8002710:	a80c      	add	r0, sp, #48	; 0x30
 8002712:	f7ff fd4d 	bl	80021b0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
 8002716:	f241 3310 	movw	r3, #4880	; 0x1310
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 800271a:	f243 0084 	movw	r0, #12420	; 0x3084
 800271e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  REG_INSERT(tp);
 8002722:	f8d4 c014 	ldr.w	ip, [r4, #20]
  ch.tm.offset = tm.last;
 8002726:	990e      	ldr	r1, [sp, #56]	; 0x38
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8002728:	f6c0 0000 	movt	r0, #2048	; 0x800
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800272c:	f103 0e10 	add.w	lr, r3, #16
 8002730:	6460      	str	r0, [r4, #68]	; 0x44
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002732:	f44f 426d 	mov.w	r2, #60672	; 0xed00
  REG_INSERT(tp);
 8002736:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 800273a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 800273e:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8002742:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
  tp->mtxlist   = NULL;
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8002746:	6625      	str	r5, [r4, #96]	; 0x60
 8002748:	6721      	str	r1, [r4, #112]	; 0x70
 800274a:	f2ce 0200 	movt	r2, #57344	; 0xe000
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 800274e:	6665      	str	r5, [r4, #100]	; 0x64
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8002750:	f884 704e 	strb.w	r7, [r4, #78]	; 0x4e
  tp->name      = name;
  REG_INSERT(tp);
 8002754:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8002758:	619d      	str	r5, [r3, #24]
  H_NEXT(&default_heap.header) = NULL;
 800275a:	609d      	str	r5, [r3, #8]
  H_PAGES(&default_heap.header) = 0;
 800275c:	60dd      	str	r5, [r3, #12]
 800275e:	f8c3 e010 	str.w	lr, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8002762:	f8c3 e014 	str.w	lr, [r3, #20]
 8002766:	63e4      	str	r4, [r4, #60]	; 0x3c
 8002768:	f8cc 0010 	str.w	r0, [ip, #16]
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 800276c:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
 8002770:	68d7      	ldr	r7, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002772:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8002776:	f44f 7140 	mov.w	r1, #768	; 0x300
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	4038      	ands	r0, r7
  reg_value  =  (reg_value                                   |
 800277c:	f2c0 51fa 	movt	r1, #1530	; 0x5fa
 8002780:	4301      	orrs	r1, r0
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
 8002782:	f241 49c1 	movw	r9, #5313	; 0x14c1
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
  endmem  = __heap_end__;
 8002786:	f241 3708 	movw	r7, #4872	; 0x1308
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
 800278a:	f241 30a8 	movw	r0, #5032	; 0x13a8
 800278e:	f6c0 0900 	movt	r9, #2048	; 0x800
 8002792:	f2c2 0000 	movt	r0, #8192	; 0x2000
  endmem  = __heap_end__;
 8002796:	f2c2 0700 	movt	r7, #8192	; 0x2000
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
 800279a:	9003      	str	r0, [sp, #12]
  endmem  = __heap_end__;
 800279c:	9704      	str	r7, [sp, #16]
 800279e:	f8c3 9000 	str.w	r9, [r3]
 80027a2:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 80027a6:	f104 0354 	add.w	r3, r4, #84	; 0x54
 80027aa:	6167      	str	r7, [r4, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80027ac:	61a7      	str	r7, [r4, #24]
 80027ae:	6563      	str	r3, [r4, #84]	; 0x54
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
 80027b0:	9f03      	ldr	r7, [sp, #12]
  endmem  = __heap_end__;
 80027b2:	9b04      	ldr	r3, [sp, #16]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
 80027b4:	f241 3ab0 	movw	sl, #5040	; 0x13b0
  endmem  = __heap_end__;
 80027b8:	f242 0e00 	movw	lr, #8192	; 0x2000

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80027bc:	f64e 50f0 	movw	r0, #60912	; 0xedf0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80027c0:	f104 0c58 	add.w	ip, r4, #88	; 0x58
 80027c4:	f2ce 0000 	movt	r0, #57344	; 0xe000
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
 80027c8:	f2c2 0a00 	movt	sl, #8192	; 0x2000
  endmem  = __heap_end__;
 80027cc:	f2c2 0e00 	movt	lr, #8192	; 0x2000
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 80027d0:	64a5      	str	r5, [r4, #72]	; 0x48
 80027d2:	f8c4 c058 	str.w	ip, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
 80027d6:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
 80027da:	f8c3 e000 	str.w	lr, [r3]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
 80027de:	f8c7 a000 	str.w	sl, [r7]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80027e2:	60d1      	str	r1, [r2, #12]
 80027e4:	68c1      	ldr	r1, [r0, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80027e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80027ea:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80027ee:	60c1      	str	r1, [r0, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80027f0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80027f4:	681c      	ldr	r4, [r3, #0]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	2010      	movs	r0, #16
 80027f8:	f044 0401 	orr.w	r4, r4, #1
 80027fc:	2120      	movs	r1, #32
 80027fe:	601c      	str	r4, [r3, #0]
 8002800:	77d0      	strb	r0, [r2, #31]
 8002802:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
 8002806:	f385 8811 	msr	BASEPRI, r5
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800280a:	b662      	cpsie	i
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800280c:	2320      	movs	r3, #32
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f241 3234 	movw	r2, #4916	; 0x1334
 8002816:	f2c2 0200 	movt	r2, #8192	; 0x2000
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 800281a:	f241 2330 	movw	r3, #4656	; 0x1230
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800281e:	f240 2765 	movw	r7, #613	; 0x265
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8002822:	f243 059c 	movw	r5, #12444	; 0x309c
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8002826:	f2c2 0300 	movt	r3, #8192	; 0x2000
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 800282a:	f8d2 9014 	ldr.w	r9, [r2, #20]
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800282e:	f6c0 0700 	movt	r7, #2048	; 0x800
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8002832:	f6c0 0500 	movt	r5, #2048	; 0x800
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002836:	f241 5e11 	movw	lr, #5393	; 0x1511
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 800283a:	f103 0190 	add.w	r1, r3, #144	; 0x90
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800283e:	2400      	movs	r4, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8002840:	2001      	movs	r0, #1
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002842:	f8c3 708c 	str.w	r7, [r3, #140]	; 0x8c
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8002846:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800284a:	f103 0c6c 	add.w	ip, r3, #108	; 0x6c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800284e:	f103 05bc 	add.w	r5, r3, #188	; 0xbc
 8002852:	f6c0 0e00 	movt	lr, #2048	; 0x800
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8002856:	f103 07b8 	add.w	r7, r3, #184	; 0xb8
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 800285a:	f04f 0a02 	mov.w	sl, #2
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 800285e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8002862:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8002866:	f883 00b2 	strb.w	r0, [r3, #178]	; 0xb2
  tp->name      = name;
  REG_INSERT(tp);
 800286a:	f8c3 90a4 	str.w	r9, [r3, #164]	; 0xa4
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 800286e:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8002872:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002876:	f8c3 c09c 	str.w	ip, [r3, #156]	; 0x9c
 800287a:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 800287e:	f883 a0b0 	strb.w	sl, [r3, #176]	; 0xb0
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002882:	671c      	str	r4, [r3, #112]	; 0x70
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002884:	f883 40b1 	strb.w	r4, [r3, #177]	; 0xb1
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8002888:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 800288c:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
  chSchWakeupS(tp, MSG_OK);
 8002890:	4608      	mov	r0, r1
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8002892:	f8c9 1010 	str.w	r1, [r9, #16]
 8002896:	f8c3 70b8 	str.w	r7, [r3, #184]	; 0xb8
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800289a:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
 800289e:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
 80028a2:	6151      	str	r1, [r2, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
  chSchWakeupS(tp, MSG_OK);
 80028a4:	f7ff f9cc 	bl	8001c40 <chSchWakeupS.constprop.28>
 80028a8:	f384 8811 	msr	BASEPRI, r4
 80028ac:	2300      	movs	r3, #0
 80028ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f041 0110 	orr.w	r1, r1, #16
 80028ba:	6059      	str	r1, [r3, #4]
 80028bc:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 80028c0:	f640 4474 	movw	r4, #3188	; 0xc74
 80028c4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80028c8:	4620      	mov	r0, r4
 80028ca:	2100      	movs	r1, #0
 80028cc:	f7ff f920 	bl	8001b10 <sd_lld_start>
  sdp->state = SD_READY;
 80028d0:	2302      	movs	r3, #2
 80028d2:	7223      	strb	r3, [r4, #8]
 80028d4:	2300      	movs	r3, #0
 80028d6:	f383 8811 	msr	BASEPRI, r3

  AFIO -> MAPR |= AFIO_MAPR_USART3_REMAP_PARTIALREMAP;
  http://stm32.kosyak.info/doc/globals_0x61.html
  */
  char data[24] = "hallo mundo \n \r";
  char info[128] ="info: \n";
 80028da:	f642 7310 	movw	r3, #12048	; 0x2f10
 80028de:	f6c0 0300 	movt	r3, #2048	; 0x800
 80028e2:	af0c      	add	r7, sp, #48	; 0x30
 80028e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028e8:	2278      	movs	r2, #120	; 0x78
 80028ea:	e887 0003 	stmia.w	r7, {r0, r1}
 80028ee:	2100      	movs	r1, #0
 80028f0:	a80e      	add	r0, sp, #56	; 0x38
 80028f2:	9702      	str	r7, [sp, #8]
 80028f4:	f7fe fbfe 	bl	80010f4 <memset>
  chThdSleepMilliseconds(2500);
 80028f8:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80028fc:	f7ff f970 	bl	8001be0 <chThdSleep>
 8002900:	2320      	movs	r3, #32
 8002902:	f383 8811 	msr	BASEPRI, r3
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8002906:	f241 3734 	movw	r7, #4916	; 0x1334
 800290a:	f2c2 0700 	movt	r7, #8192	; 0x2000
 800290e:	6979      	ldr	r1, [r7, #20]
 8002910:	9704      	str	r7, [sp, #16]
 8002912:	9101      	str	r1, [sp, #4]
 8002914:	9f01      	ldr	r7, [sp, #4]
  tp = (thread_t *)((uint8_t *)wsp + size -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 8002916:	f241 03e0 	movw	r3, #4320	; 0x10e0
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 800291a:	f243 01a4 	movw	r1, #12452	; 0x30a4
  tp = (thread_t *)((uint8_t *)wsp + size -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 800291e:	f2c2 0300 	movt	r3, #8192	; 0x2000
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8002922:	f6c0 0100 	movt	r1, #2048	; 0x800
  REG_INSERT(tp);
 8002926:	f8c3 7114 	str.w	r7, [r3, #276]	; 0x114
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 800292a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
  REG_INSERT(tp);
 800292e:	9f04      	ldr	r7, [sp, #16]
 8002930:	9901      	ldr	r1, [sp, #4]
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002932:	f641 4501 	movw	r5, #7169	; 0x1c01
 8002936:	f240 2065 	movw	r0, #613	; 0x265
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 800293a:	f503 7280 	add.w	r2, r3, #256	; 0x100
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800293e:	2400      	movs	r4, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8002940:	f04f 0e81 	mov.w	lr, #129	; 0x81
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002944:	f103 09dc 	add.w	r9, r3, #220	; 0xdc
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8002948:	f04f 0c01 	mov.w	ip, #1
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800294c:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002950:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002954:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
 8002958:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
  tp = (thread_t *)((uint8_t *)wsp + size -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 800295c:	f8c3 311c 	str.w	r3, [r3, #284]	; 0x11c
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8002960:	f8c3 7110 	str.w	r7, [r3, #272]	; 0x110
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002964:	f8c3 910c 	str.w	r9, [r3, #268]	; 0x10c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8002968:	f883 a120 	strb.w	sl, [r3, #288]	; 0x120
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 800296c:	f883 c122 	strb.w	ip, [r3, #290]	; 0x122
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002970:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002974:	f883 4121 	strb.w	r4, [r3, #289]	; 0x121
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8002978:	f8c3 4138 	str.w	r4, [r3, #312]	; 0x138
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 800297c:	f8c3 4134 	str.w	r4, [r3, #308]	; 0x134
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8002980:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8002984:	f8c3 e13c 	str.w	lr, [r3, #316]	; 0x13c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8002988:	f503 7594 	add.w	r5, r3, #296	; 0x128
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 800298c:	610a      	str	r2, [r1, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800298e:	f503 7196 	add.w	r1, r3, #300	; 0x12c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8002992:	4610      	mov	r0, r2
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8002994:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8002998:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
 800299c:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80029a0:	617a      	str	r2, [r7, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 80029a2:	f7ff f94d 	bl	8001c40 <chSchWakeupS.constprop.28>
 80029a6:	f384 8811 	msr	BASEPRI, r4
 80029aa:	f243 1738 	movw	r7, #12600	; 0x3138
 80029ae:	f6c0 0700 	movt	r7, #2048	; 0x800
 80029b2:	9708      	str	r7, [sp, #32]
 80029b4:	f243 1754 	movw	r7, #12628	; 0x3154
 80029b8:	f6c0 0700 	movt	r7, #2048	; 0x800
 80029bc:	9709      	str	r7, [sp, #36]	; 0x24
 80029be:	f241 3730 	movw	r7, #4912	; 0x1330
 80029c2:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80029c6:	9703      	str	r7, [sp, #12]
 80029c8:	f241 37ac 	movw	r7, #5036	; 0x13ac
 80029cc:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80029d0:	9705      	str	r7, [sp, #20]
 80029d2:	f241 2728 	movw	r7, #4648	; 0x1228
 80029d6:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80029da:	970a      	str	r7, [sp, #40]	; 0x28
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 80029dc:	f241 07d0 	movw	r7, #4304	; 0x10d0
 80029e0:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80029e4:	9707      	str	r7, [sp, #28]
 80029e6:	f64d 6783 	movw	r7, #56963	; 0xde83
 80029ea:	f10b 0430 	add.w	r4, fp, #48	; 0x30
		/* Inicio de GPT (General Purpose Timer), para medir el pulso a enviar al ultrasonido HC-SR04 */
		gptStart(&GPTD1, &gpt1cfg); //argumento GPTD1 (TIM1) como apuntador. igualmente, se envía apuntador de la configuración (más 
		/* Inicio de ICU (Input Capture Driver), para medir el tiempo que tarda en alto el pulso enviado por el echo -  ultrasonido HC-SR04. Basado en ejemplo en PlayEmbeded.com */
		icuStart(&ICUD3, &icu3cfg); //argumento ICUD3 (TIM3, el TIM2 ya es usado por chibios) como apuntador. igualmente, se envía apuntador de la configuración (más arriba)
		
		palSetPad(GPIOA, 0);
 80029ee:	f44f 6a00 	mov.w	sl, #2048	; 0x800
 80029f2:	f2c4 371b 	movt	r7, #17179	; 0x431b
 80029f6:	f04f 0901 	mov.w	r9, #1
 80029fa:	f1a4 0524 	sub.w	r5, r4, #36	; 0x24
 80029fe:	970b      	str	r7, [sp, #44]	; 0x2c
 8002a00:	f2c4 0a01 	movt	sl, #16385	; 0x4001
 8002a04:	2320      	movs	r3, #32
 8002a06:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 8002a0a:	f898 3000 	ldrb.w	r3, [r8]
 8002a0e:	9f08      	ldr	r7, [sp, #32]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	f8c8 7004 	str.w	r7, [r8, #4]
 8002a16:	f000 822e 	beq.w	8002e76 <main+0x976>
 8002a1a:	9f07      	ldr	r7, [sp, #28]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8002a20:	fba7 7103 	umull	r7, r1, r7, r3
 8002a24:	0c49      	lsrs	r1, r1, #17
 8002a26:	3901      	subs	r1, #1
 8002a28:	b289      	uxth	r1, r1
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 8002a2a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8002a2e:	2300      	movs	r3, #0
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
 8002a30:	2002      	movs	r0, #2
 8002a32:	6013      	str	r3, [r2, #0]
  gptp->tim->CR2 = gptp->config->cr2;
 8002a34:	6053      	str	r3, [r2, #4]
 8002a36:	f888 0000 	strb.w	r0, [r8]
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
 8002a3a:	6291      	str	r1, [r2, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8002a3c:	6113      	str	r3, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8002a3e:	60d3      	str	r3, [r2, #12]
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	2320      	movs	r3, #32
 8002a46:	f383 8811 	msr	BASEPRI, r3

  osalDbgAssert((icup->config->channel == ICU_CHANNEL_1) ||
                (icup->config->channel == ICU_CHANNEL_2),
                "invalid input");

  if (icup->state == ICU_STOP) {
 8002a4a:	7833      	ldrb	r3, [r6, #0]
  osalDbgCheck((icup != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icup->config = config;
 8002a4c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002a4e:	f640 0200 	movw	r2, #2048	; 0x800
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	6077      	str	r7, [r6, #4]
 8002a56:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002a5a:	f000 8235 	beq.w	8002ec8 <main+0x9c8>
    }
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 8002a5e:	68d3      	ldr	r3, [r2, #12]
 8002a60:	6891      	ldr	r1, [r2, #8]
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8002a66:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 8002a6c:	f645 22c5 	movw	r2, #23237	; 0x5ac5
 8002a70:	f6c0 227c 	movt	r2, #2684	; 0xa7c
 8002a74:	0949      	lsrs	r1, r1, #5
 8002a76:	fba2 0101 	umull	r0, r1, r2, r1
 8002a7a:	09c9      	lsrs	r1, r1, #7
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8002a7c:	2200      	movs	r2, #0
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 8002a7e:	3901      	subs	r1, #1
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
  icup->tim->ARR  = 0xFFFF;
 8002a80:	f64f 77ff 	movw	r7, #65535	; 0xffff
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8002a84:	611a      	str	r2, [r3, #16]
  }
  else {
    /* Selected input 2.
       CCMR1_CC1S = 10 = CH1 Input on TI2.
       CCMR1_CC2S = 01 = CH2 Input on TI2.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 8002a86:	f44f 7081 	mov.w	r0, #258	; 0x102
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8002a8a:	60da      	str	r2, [r3, #12]
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
 8002a8c:	6299      	str	r1, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
 8002a8e:	62df      	str	r7, [r3, #44]	; 0x2c
       CCMR1_CC2S = 01 = CH2 Input on TI2.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);

    /* SMCR_TS  = 110, input is TI2FP2.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8002a90:	2164      	movs	r1, #100	; 0x64

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8002a92:	2713      	movs	r7, #19
  }
  else {
    /* Selected input 2.
       CCMR1_CC1S = 10 = CH1 Input on TI2.
       CCMR1_CC2S = 01 = CH2 Input on TI2.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 8002a94:	6198      	str	r0, [r3, #24]

    /* SMCR_TS  = 110, input is TI2FP2.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8002a96:	6099      	str	r1, [r3, #8]
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[0];
 8002a98:	f103 0034 	add.w	r0, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 8002a9c:	f103 0138 	add.w	r1, r3, #56	; 0x38

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8002aa0:	621f      	str	r7, [r3, #32]
  icu_lld_start(icup);
  icup->state = ICU_READY;
 8002aa2:	2302      	movs	r3, #2
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[0];
 8002aa4:	6130      	str	r0, [r6, #16]
    icup->pccrp = &icup->tim->CCR[1];
 8002aa6:	6171      	str	r1, [r6, #20]
 8002aa8:	7033      	strb	r3, [r6, #0]
 8002aaa:	f382 8811 	msr	BASEPRI, r2
		
		palClearPad(GPIOA, TRIGG);
 8002aae:	2740      	movs	r7, #64	; 0x40
		/* Inicio de GPT (General Purpose Timer), para medir el pulso a enviar al ultrasonido HC-SR04 */
		gptStart(&GPTD1, &gpt1cfg); //argumento GPTD1 (TIM1) como apuntador. igualmente, se envía apuntador de la configuración (más 
		/* Inicio de ICU (Input Capture Driver), para medir el tiempo que tarda en alto el pulso enviado por el echo -  ultrasonido HC-SR04. Basado en ejemplo en PlayEmbeded.com */
		icuStart(&ICUD3, &icu3cfg); //argumento ICUD3 (TIM3, el TIM2 ya es usado por chibios) como apuntador. igualmente, se envía apuntador de la configuración (más arriba)
		
		palSetPad(GPIOA, 0);
 8002ab0:	2201      	movs	r2, #1
		
		palClearPad(GPIOA, TRIGG);
		
		chprintf( (BaseChannel *)&SD3, "began %x\n\r", PAL_LOW);
 8002ab2:	f640 4074 	movw	r0, #3188	; 0xc74
 8002ab6:	f243 01ac 	movw	r1, #12460	; 0x30ac
		/* Inicio de GPT (General Purpose Timer), para medir el pulso a enviar al ultrasonido HC-SR04 */
		gptStart(&GPTD1, &gpt1cfg); //argumento GPTD1 (TIM1) como apuntador. igualmente, se envía apuntador de la configuración (más 
		/* Inicio de ICU (Input Capture Driver), para medir el tiempo que tarda en alto el pulso enviado por el echo -  ultrasonido HC-SR04. Basado en ejemplo en PlayEmbeded.com */
		icuStart(&ICUD3, &icu3cfg); //argumento ICUD3 (TIM3, el TIM2 ya es usado por chibios) como apuntador. igualmente, se envía apuntador de la configuración (más arriba)
		
		palSetPad(GPIOA, 0);
 8002aba:	f8ca 2010 	str.w	r2, [sl, #16]
		
		palClearPad(GPIOA, TRIGG);
		
		chprintf( (BaseChannel *)&SD3, "began %x\n\r", PAL_LOW);
 8002abe:	f6c0 0100 	movt	r1, #2048	; 0x800
		/* Inicio de ICU (Input Capture Driver), para medir el tiempo que tarda en alto el pulso enviado por el echo -  ultrasonido HC-SR04. Basado en ejemplo en PlayEmbeded.com */
		icuStart(&ICUD3, &icu3cfg); //argumento ICUD3 (TIM3, el TIM2 ya es usado por chibios) como apuntador. igualmente, se envía apuntador de la configuración (más arriba)
		
		palSetPad(GPIOA, 0);
		
		palClearPad(GPIOA, TRIGG);
 8002ac2:	f8ca 7014 	str.w	r7, [sl, #20]
		
		chprintf( (BaseChannel *)&SD3, "began %x\n\r", PAL_LOW);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002acc:	f7ff f930 	bl	8001d30 <chprintf.constprop.0>
		/*
		 * Creates the example threads.
		 */

		palSetPad(GPIOA, TRIGG);
 8002ad0:	f8ca 7010 	str.w	r7, [sl, #16]
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	f383 8811 	msr	BASEPRI, r3

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is why the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8002ada:	f8d8 2004 	ldr.w	r2, [r8, #4]
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
 8002ade:	f8d8 300c 	ldr.w	r3, [r8, #12]

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is why the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8002ae2:	6851      	ldr	r1, [r2, #4]
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8002ae4:	2704      	movs	r7, #4
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  gptp->tim->CNT = 0;                           /* Reset counter.           */
 8002ae6:	2200      	movs	r2, #0
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
 8002ae8:	200a      	movs	r0, #10
 8002aea:	62d8      	str	r0, [r3, #44]	; 0x2c
 8002aec:	f888 7000 	strb.w	r7, [r8]
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
 8002af0:	f8c3 9014 	str.w	r9, [r3, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is why the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8002af6:	611a      	str	r2, [r3, #16]
  if (NULL != gptp->config->callback)
 8002af8:	b119      	cbz	r1, 8002b02 <main+0x602>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8002b02:	2285      	movs	r2, #133	; 0x85
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	2300      	movs	r3, #0
 8002b08:	f383 8811 	msr	BASEPRI, r3
		gptStartOneShot(&GPTD1, 10);  // dT = 500,000 / 10 = 50000 Hz , 20us
		
		distancia = 0.0; //para reiniciar el valor de distancia
 8002b0c:	9803      	ldr	r0, [sp, #12]
 8002b0e:	2700      	movs	r7, #0
 8002b10:	2320      	movs	r3, #32
 8002b12:	6007      	str	r7, [r0, #0]
 8002b14:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8002b18:	68f3      	ldr	r3, [r6, #12]
  icup->tim->SR = 0;
 8002b1a:	2200      	movs	r2, #0
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8002b1c:	6959      	ldr	r1, [r3, #20]
  icup->tim->SR = 0;

  /* Timer is started.*/
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8002b1e:	2005      	movs	r0, #5
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8002b20:	f041 0101 	orr.w	r1, r1, #1
 8002b24:	6159      	str	r1, [r3, #20]

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 8002b26:	2103      	movs	r1, #3
  icup->tim->SR = 0;
 8002b28:	611a      	str	r2, [r3, #16]

  /* Timer is started.*/
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8002b2a:	6018      	str	r0, [r3, #0]
 8002b2c:	7031      	strb	r1, [r6, #0]
 8002b2e:	f382 8811 	msr	BASEPRI, r2
 8002b32:	2320      	movs	r3, #32
 8002b34:	f383 8811 	msr	BASEPRI, r3
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_enable_notifications(ICUDriver *icup) {
  uint32_t dier = icup->tim->DIER;
 8002b38:	f640 0600 	movw	r6, #2048	; 0x800
 8002b3c:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002b40:	68f2      	ldr	r2, [r6, #12]
 8002b42:	68d3      	ldr	r3, [r2, #12]

  /* If interrupts were already enabled then the operation is skipped.
     This is done in order to avoid clearing the SR and risk losing
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 8002b44:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
 8002b48:	d110      	bne.n	8002b6c <main+0x66c>
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;

    if (icup->config->channel == ICU_CHANNEL_1) {
 8002b4a:	6871      	ldr	r1, [r6, #4]
  /* If interrupts were already enabled then the operation is skipped.
     This is done in order to avoid clearing the SR and risk losing
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;
 8002b4c:	6110      	str	r0, [r2, #16]

    if (icup->config->channel == ICU_CHANNEL_1) {
 8002b4e:	7d08      	ldrb	r0, [r1, #20]
 8002b50:	2800      	cmp	r0, #0
 8002b52:	f040 81b2 	bne.w	8002eba <main+0x9ba>
      /* Enabling periodic callback on CC1.*/
      dier |= STM32_TIM_DIER_CC1IE;

      /* Optionally enabling width callback on CC2.*/
      if (icup->config->width_cb != NULL)
 8002b56:	6888      	ldr	r0, [r1, #8]
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	f000 81d6 	beq.w	8002f0a <main+0xa0a>
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;

      /* Optionally enabling width callback on CC1.*/
      if (icup->config->width_cb != NULL)
        dier |= STM32_TIM_DIER_CC1IE;
 8002b5e:	f043 0306 	orr.w	r3, r3, #6
    }

    /* If an overflow callback is defined then also the overflow callback
       is enabled.*/
    if (icup->config->overflow_cb != NULL)
 8002b62:	6909      	ldr	r1, [r1, #16]
 8002b64:	b109      	cbz	r1, 8002b6a <main+0x66a>
      dier |= STM32_TIM_DIER_UIE;
 8002b66:	f043 0301 	orr.w	r3, r3, #1

    /* One single atomic write.*/
    icup->tim->DIER = dier;
 8002b6a:	60d3      	str	r3, [r2, #12]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f383 8811 	msr	BASEPRI, r3
		icuStartCapture(&ICUD3); //comienza la captura o espera a un flanco de subida
		icuEnableNotifications(&ICUD3);
		chThdSleepMilliseconds(100); //al menos 60 ms acepta el US para ser leido de nuevo, se le da algo mas de holgura de tiempo
 8002b72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b76:	f7ff f833 	bl	8001be0 <chThdSleep>
		chprintf( (BaseChannel *)&SD3, "shot ICU %x\n\r", PAL_LOW);
 8002b7a:	f640 4074 	movw	r0, #3188	; 0xc74
 8002b7e:	f243 01b8 	movw	r1, #12472	; 0x30b8
 8002b82:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002b86:	2200      	movs	r2, #0
 8002b88:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b8c:	f7ff f8d0 	bl	8001d30 <chprintf.constprop.0>
 8002b90:	2320      	movs	r3, #32
 8002b92:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void gpt_lld_stop(GPTDriver *gptp) {

  if (gptp->state == GPT_READY) {
 8002b96:	f898 3000 	ldrb.w	r3, [r8]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d117      	bne.n	8002bce <main+0x6ce>
    gptp->tim->CR1 = 0;                         /* Timer disabled.          */
 8002b9e:	9f07      	ldr	r7, [sp, #28]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8002ba4:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	f2ce 0100 	movt	r1, #57344	; 0xe000
    gptp->tim->DIER = 0;                        /* All IRQs disabled.       */
 8002bae:	60d3      	str	r3, [r2, #12]
 8002bb0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    gptp->tim->SR = 0;                          /* Clear pending IRQs.      */
 8002bb4:	6113      	str	r3, [r2, #16]
#if STM32_GPT_USE_TIM1
    if (&GPTD1 == gptp) {
#if !defined(STM32_TIM1_SUPPRESS_ISR)
      nvicDisableVector(STM32_TIM1_UP_NUMBER);
#endif
      rccDisableTIM1(FALSE);
 8002bb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bba:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
 8002bbe:	f2c4 0202 	movt	r2, #16386	; 0x4002
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8002bc2:	f881 3319 	strb.w	r3, [r1, #793]	; 0x319
 8002bc6:	6993      	ldr	r3, [r2, #24]
 8002bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bcc:	6193      	str	r3, [r2, #24]

  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
                "invalid state");

  gpt_lld_stop(gptp);
  gptp->config = NULL;
 8002bce:	2300      	movs	r3, #0
  gptp->state  = GPT_STOP;
 8002bd0:	f888 9000 	strb.w	r9, [r8]

  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
                "invalid state");

  gpt_lld_stop(gptp);
  gptp->config = NULL;
 8002bd4:	f8c8 3004 	str.w	r3, [r8, #4]
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	2320      	movs	r3, #32
	
		gptStop(&GPTD1);
		/*GPIOA, 0 es de prueba (debug)*/
		palClearPad(GPIOA, 0);
 8002bde:	f8ca 9014 	str.w	r9, [sl, #20]
 8002be2:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void icu_lld_stop_capture(ICUDriver *icup) {

  /* Timer stopped.*/
  icup->tim->CR1   = 0;
 8002be6:	68f3      	ldr	r3, [r6, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

  /* All interrupts disabled.*/
  icup->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8002bec:	68d9      	ldr	r1, [r3, #12]

  osalSysLock();
  osalDbgAssert((icup->state == ICU_READY) || (icup->state == ICU_WAITING) ||
                (icup->state == ICU_ACTIVE),
                "invalid state");
  icuStopCaptureI(icup);
 8002bee:	2002      	movs	r0, #2
 8002bf0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002bf4:	7030      	strb	r0, [r6, #0]
 8002bf6:	60d9      	str	r1, [r3, #12]
 8002bf8:	f382 8811 	msr	BASEPRI, r2
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void icu_lld_stop(ICUDriver *icup) {

  if (icup->state == ICU_READY) {
 8002c02:	f640 0600 	movw	r6, #2048	; 0x800
 8002c06:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002c0a:	7833      	ldrb	r3, [r6, #0]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d116      	bne.n	8002c3e <main+0x73e>
    /* Clock deactivation.*/
    icup->tim->CR1  = 0;                    /* Timer disabled.              */
 8002c10:	68f2      	ldr	r2, [r6, #12]
 8002c12:	2300      	movs	r3, #0
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8002c14:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	f2ce 0100 	movt	r1, #57344	; 0xe000
    icup->tim->DIER = 0;                    /* All IRQs disabled.           */
 8002c1e:	60d3      	str	r3, [r2, #12]
 8002c20:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    icup->tim->SR   = 0;                    /* Clear eventual pending IRQs. */
 8002c24:	6113      	str	r3, [r2, #16]
#if STM32_ICU_USE_TIM3
    if (&ICUD3 == icup) {
#if !defined(STM32_TIM3_SUPPRESS_ISR)
      nvicDisableVector(STM32_TIM3_NUMBER);
#endif
      rccDisableTIM3(FALSE);
 8002c26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c2a:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
 8002c2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8002c32:	f881 331d 	strb.w	r3, [r1, #797]	; 0x31d
 8002c36:	69d3      	ldr	r3, [r2, #28]
 8002c38:	f023 0302 	bic.w	r3, r3, #2
 8002c3c:	61d3      	str	r3, [r2, #28]

  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");

  icu_lld_stop(icup);
  icup->config = NULL;
 8002c3e:	2300      	movs	r3, #0
  icup->state  = ICU_STOP;
 8002c40:	f886 9000 	strb.w	r9, [r6]

  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");

  icu_lld_stop(icup);
  icup->config = NULL;
 8002c44:	6073      	str	r3, [r6, #4]
 8002c46:	f383 8811 	msr	BASEPRI, r3
		icuStop(&ICUD3);
		
		//chThdSleepMilliseconds(500);
		
		//distancia = (SPEED_OF_SOUND * contador * M_TO_CM) / (100000 * 2);
		if(lectura){
 8002c4a:	9f05      	ldr	r7, [sp, #20]
			//distancia = 22.0;
			chprintf( (BaseChannel *)&SD3, "if %x\n\r", PAL_LOW);
 8002c4c:	f640 4074 	movw	r0, #3188	; 0xc74
		icuStop(&ICUD3);
		
		//chThdSleepMilliseconds(500);
		
		//distancia = (SPEED_OF_SOUND * contador * M_TO_CM) / (100000 * 2);
		if(lectura){
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	2a00      	cmp	r2, #0
 8002c54:	f000 80e6 	beq.w	8002e24 <main+0x924>
			//distancia = 22.0;
			chprintf( (BaseChannel *)&SD3, "if %x\n\r", PAL_LOW);
 8002c58:	f243 01c8 	movw	r1, #12488	; 0x30c8
 8002c5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c60:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002c64:	2200      	movs	r2, #0
 8002c66:	f7ff f863 	bl	8001d30 <chprintf.constprop.0>
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 8002c70:	f640 0018 	movw	r0, #2072	; 0x818
 8002c74:	f243 1148 	movw	r1, #12616	; 0x3148
 8002c78:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c7c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002c80:	f7fe ff46 	bl	8001b10 <sd_lld_start>
  sdp->state = SD_READY;
 8002c84:	2302      	movs	r3, #2
 8002c86:	f88b 3008 	strb.w	r3, [fp, #8]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f383 8811 	msr	BASEPRI, r3
		
		//osalSysLock();
		//n = streamRead(&SD2, &info, 150); //funciona sin timeout
		//n = chnRead(&SD2, &info, 150); //funciona sin timeout
		sdStart(&SD2, &sd2cfg);
		n = chnReadTimeout 	(&SD2, &info, 128, TIME_INFINITE); //funciona con timeout, lee 100 primeros bytes, pero no del canal sino del inicio de transmisión, esta función es de tipo blocking
 8002c90:	f640 0018 	movw	r0, #2072	; 0x818
 8002c94:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c98:	6803      	ldr	r3, [r0, #0]
 8002c9a:	a90c      	add	r1, sp, #48	; 0x30
 8002c9c:	69df      	ldr	r7, [r3, #28]
 8002c9e:	2280      	movs	r2, #128	; 0x80
 8002ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ca4:	47b8      	blx	r7
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	9006      	str	r0, [sp, #24]
 8002caa:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void sd_lld_stop(SerialDriver *sdp) {

  if (sdp->state == SD_READY) {
 8002cae:	f640 0b18 	movw	fp, #2072	; 0x818
 8002cb2:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 8002cb6:	f89b 3008 	ldrb.w	r3, [fp, #8]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d116      	bne.n	8002cec <main+0x7ec>
    usart_deinit(sdp->usart);
 8002cbe:	f8db 2454 	ldr.w	r2, [fp, #1108]	; 0x454
 *
 * @param[in] u         pointer to an USART I/O block
 */
static void usart_deinit(USART_TypeDef *u) {

  u->CR1 = 0;
 8002cc2:	2300      	movs	r3, #0
      return;
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccDisableUSART2(FALSE);
 8002cc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 *
 * @param[in] u         pointer to an USART I/O block
 */
static void usart_deinit(USART_TypeDef *u) {

  u->CR1 = 0;
 8002cc8:	60d3      	str	r3, [r2, #12]
      return;
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccDisableUSART2(FALSE);
 8002cca:	f2c4 0102 	movt	r1, #16386	; 0x4002
 * @param[in] u         pointer to an USART I/O block
 */
static void usart_deinit(USART_TypeDef *u) {

  u->CR1 = 0;
  u->CR2 = 0;
 8002cce:	6113      	str	r3, [r2, #16]
  u->CR3 = 0;
 8002cd0:	6153      	str	r3, [r2, #20]
      return;
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccDisableUSART2(FALSE);
 8002cd2:	69c8      	ldr	r0, [r1, #28]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8002cd4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002cd8:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 8002cdc:	61c8      	str	r0, [r1, #28]
 8002cde:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8002ce2:	2140      	movs	r1, #64	; 0x40
 8002ce4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8002ce8:	f882 3326 	strb.w	r3, [r2, #806]	; 0x326
 */
void oqResetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8002cec:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = qSizeX(oqp);
 8002cf0:	f8db 1040 	ldr.w	r1, [fp, #64]	; 0x40
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8002cf4:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8002cf8:	1a89      	subs	r1, r1, r2
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (queue_notempty(tqp)) {
 8002cfa:	42a3      	cmp	r3, r4

  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");

  sd_lld_stop(sdp);
  sdp->state = SD_STOP;
 8002cfc:	f88b 9008 	strb.w	r9, [fp, #8]
 */
void oqResetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8002d00:	f8cb 2048 	str.w	r2, [fp, #72]	; 0x48
  oqp->q_wrptr = oqp->q_buffer;
 8002d04:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
  oqp->q_counter = qSizeX(oqp);
 8002d08:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8002d0c:	bf18      	it	ne
 8002d0e:	f06f 0701 	mvnne.w	r7, #1
 8002d12:	d00b      	beq.n	8002d2c <main+0x82c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8002d14:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 8002d16:	4618      	mov	r0, r3
 8002d18:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 8002d1c:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8002d1e:	625f      	str	r7, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002d20:	f7ff fa6e 	bl	8002200 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8002d24:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8002d28:	42a3      	cmp	r3, r4
 8002d2a:	d1f3      	bne.n	8002d14 <main+0x814>
 */
void iqResetI(input_queue_t *iqp) {

  osalDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8002d2c:	f8db 2018 	ldr.w	r2, [fp, #24]
 8002d30:	f8db 300c 	ldr.w	r3, [fp, #12]
 8002d34:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
  iqp->q_wrptr = iqp->q_buffer;
 8002d38:	f8cb 2020 	str.w	r2, [fp, #32]
 8002d3c:	42ab      	cmp	r3, r5
  iqp->q_counter = 0;
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f8cb 2014 	str.w	r2, [fp, #20]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8002d46:	bf18      	it	ne
 8002d48:	f06f 0701 	mvnne.w	r7, #1
 8002d4c:	d00b      	beq.n	8002d66 <main+0x866>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8002d4e:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 8002d50:	4618      	mov	r0, r3
 8002d52:	f8cb 200c 	str.w	r2, [fp, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002d56:	6055      	str	r5, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8002d58:	625f      	str	r7, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002d5a:	f7ff fa51 	bl	8002200 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8002d5e:	f8db 300c 	ldr.w	r3, [fp, #12]
 8002d62:	42ab      	cmp	r3, r5
 8002d64:	d1f3      	bne.n	8002d4e <main+0x84e>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 8002d66:	9f04      	ldr	r7, [sp, #16]
 8002d68:	f241 3234 	movw	r2, #4916	; 0x1334
 8002d6c:	6838      	ldr	r0, [r7, #0]
 8002d6e:	f8d7 e018 	ldr.w	lr, [r7, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8002d72:	6883      	ldr	r3, [r0, #8]
 8002d74:	f8de 7008 	ldr.w	r7, [lr, #8]
 8002d78:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002d7c:	42bb      	cmp	r3, r7
 8002d7e:	d85f      	bhi.n	8002e40 <main+0x940>
 8002d80:	2300      	movs	r3, #0
 8002d82:	f383 8811 	msr	BASEPRI, r3
		} 
		*/
		
		sdStop(&SD2);
				
  	chprintf( (BaseChannel *)&SD3, "Count %d\n\r", contador);
 8002d86:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002d88:	f640 4074 	movw	r0, #3188	; 0xc74
 8002d8c:	f243 01dc 	movw	r1, #12508	; 0x30dc
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002d96:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d9a:	f7fe ffc9 	bl	8001d30 <chprintf.constprop.0>
//  	chSysLock();
		//osalSysLock();
  	chprintf( (BaseChannel *)&SD3, "tamano %d\n\r", n);//cast a puntero de tipo BaseChannel
 8002d9e:	9b06      	ldr	r3, [sp, #24]
 8002da0:	f640 4074 	movw	r0, #3188	; 0xc74
 8002da4:	f243 01e8 	movw	r1, #12520	; 0x30e8
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002dae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002db2:	f7fe ffbd 	bl	8001d30 <chprintf.constprop.0>
  	//osalSysUnlock();
  	chprintf( (BaseChannel *)&SD3, "info %s\n\r", &info  );
 8002db6:	f640 4074 	movw	r0, #3188	; 0xc74
 8002dba:	f243 01f4 	movw	r1, #12532	; 0x30f4
 8002dbe:	aa0c      	add	r2, sp, #48	; 0x30
 8002dc0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002dc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002dc8:	f7fe ffb2 	bl	8001d30 <chprintf.constprop.0>
		chprintf( (BaseChannel *)&SD3, "valor: %f cm\n\r", distancia);
 8002dcc:	9f03      	ldr	r7, [sp, #12]
 8002dce:	6838      	ldr	r0, [r7, #0]
 8002dd0:	f7fd fbb8 	bl	8000544 <__aeabi_f2d>
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	f243 1100 	movw	r1, #12544	; 0x3100
 8002ddc:	f640 4074 	movw	r0, #3188	; 0xc74
 8002de0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002de4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002de8:	f7fe ffa2 	bl	8001d30 <chprintf.constprop.0>
		chprintf( (BaseChannel *)&SD3, "isOk %d\n\r", lectura);
 8002dec:	9f05      	ldr	r7, [sp, #20]
 8002dee:	f640 4074 	movw	r0, #3188	; 0xc74
 8002df2:	f243 1110 	movw	r1, #12560	; 0x3110
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002dfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e00:	f7fe ff96 	bl	8001d30 <chprintf.constprop.0>
		chprintf( (BaseChannel *)&SD3, "------ ------ ------- %x\n\r", true);
 8002e04:	f640 4074 	movw	r0, #3188	; 0xc74
 8002e08:	f243 111c 	movw	r1, #12572	; 0x311c
 8002e0c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002e10:	2201      	movs	r2, #1
 8002e12:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e16:	f7fe ff8b 	bl	8001d30 <chprintf.constprop.0>
		
		chThdSleepMilliseconds(500);    
 8002e1a:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e1e:	f7fe fedf 	bl	8001be0 <chThdSleep>
 8002e22:	e5ef      	b.n	8002a04 <main+0x504>
		//distancia = (SPEED_OF_SOUND * contador * M_TO_CM) / (100000 * 2);
		if(lectura){
			//distancia = 22.0;
			chprintf( (BaseChannel *)&SD3, "if %x\n\r", PAL_LOW);
		}else{
			distancia = 38.0;
 8002e24:	9f03      	ldr	r7, [sp, #12]
			chprintf( (BaseChannel *)&SD3, "els %x\n\r", PAL_LOW);
 8002e26:	f243 01d0 	movw	r1, #12496	; 0x30d0
		//distancia = (SPEED_OF_SOUND * contador * M_TO_CM) / (100000 * 2);
		if(lectura){
			//distancia = 22.0;
			chprintf( (BaseChannel *)&SD3, "if %x\n\r", PAL_LOW);
		}else{
			distancia = 38.0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f2c4 2318 	movt	r3, #16920	; 0x4218
			chprintf( (BaseChannel *)&SD3, "els %x\n\r", PAL_LOW);
 8002e30:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002e34:	f2c2 0000 	movt	r0, #8192	; 0x2000
		//distancia = (SPEED_OF_SOUND * contador * M_TO_CM) / (100000 * 2);
		if(lectura){
			//distancia = 22.0;
			chprintf( (BaseChannel *)&SD3, "if %x\n\r", PAL_LOW);
		}else{
			distancia = 38.0;
 8002e38:	603b      	str	r3, [r7, #0]
			chprintf( (BaseChannel *)&SD3, "els %x\n\r", PAL_LOW);
 8002e3a:	f7fe ff79 	bl	8001d30 <chprintf.constprop.0>
 8002e3e:	e714      	b.n	8002c6a <main+0x76a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8002e40:	6803      	ldr	r3, [r0, #0]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8002e42:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8002e44:	605a      	str	r2, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8002e46:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8002e48:	f880 9020 	strb.w	r9, [r0, #32]
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002e4c:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8002e4e:	f88e 1020 	strb.w	r1, [lr, #32]
 8002e52:	e000      	b.n	8002e56 <main+0x956>
 8002e54:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	4297      	cmp	r7, r2
 8002e5a:	d3fb      	bcc.n	8002e54 <main+0x954>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8002e5c:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8002e5e:	4671      	mov	r1, lr
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8002e60:	f8ce 3000 	str.w	r3, [lr]
  tp->queue.prev             = cp->queue.prev;
 8002e64:	f8ce 2004 	str.w	r2, [lr, #4]
  tp->queue.prev->queue.next = tp;
 8002e68:	f8c2 e000 	str.w	lr, [r2]
  cp->queue.prev             = tp;
 8002e6c:	f8c3 e004 	str.w	lr, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8002e70:	f7fd f9f0 	bl	8000254 <_port_switch>
 8002e74:	e784      	b.n	8002d80 <main+0x880>

  if (gptp->state == GPT_STOP) {
    /* Clock activation.*/
#if STM32_GPT_USE_TIM1
    if (&GPTD1 == gptp) {
      rccEnableTIM1(FALSE);
 8002e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e7e:	6999      	ldr	r1, [r3, #24]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002e80:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002e84:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002e88:	6199      	str	r1, [r3, #24]
      rccResetTIM1();
 8002e8a:	68d9      	ldr	r1, [r3, #12]
 8002e8c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8002e90:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002e94:	60d9      	str	r1, [r3, #12]
 8002e96:	2100      	movs	r1, #0
 8002e98:	60d9      	str	r1, [r3, #12]
 8002e9a:	2170      	movs	r1, #112	; 0x70
 8002e9c:	f882 1319 	strb.w	r1, [r2, #793]	; 0x319
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_GPT_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      gptp->clock = STM32_TIM1CLK;
#else
      gptp->clock = STM32_TIMCLK2;
 8002ea0:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8002ea4:	9f07      	ldr	r7, [sp, #28]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002ea6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002eaa:	f2c0 136e 	movt	r3, #366	; 0x16e
 8002eae:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002eb2:	6011      	str	r1, [r2, #0]
 8002eb4:	212f      	movs	r1, #47	; 0x2f
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	e5b7      	b.n	8002a2a <main+0x52a>
    else {
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;

      /* Optionally enabling width callback on CC1.*/
      if (icup->config->width_cb != NULL)
 8002eba:	6888      	ldr	r0, [r1, #8]
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	f47f ae4e 	bne.w	8002b5e <main+0x65e>
      if (icup->config->width_cb != NULL)
        dier |= STM32_TIM_DIER_CC2IE;
    }
    else {
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;
 8002ec2:	f043 0304 	orr.w	r3, r3, #4
 8002ec6:	e64c      	b.n	8002b62 <main+0x662>
    }
#endif

#if STM32_ICU_USE_TIM3
    if (&ICUD3 == icup) {
      rccEnableTIM3(FALSE);
 8002ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ecc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ed0:	69d9      	ldr	r1, [r3, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002ed2:	f44f 4061 	mov.w	r0, #57600	; 0xe100
 8002ed6:	f041 0102 	orr.w	r1, r1, #2
 8002eda:	61d9      	str	r1, [r3, #28]
      rccResetTIM3();
 8002edc:	6919      	ldr	r1, [r3, #16]
 8002ede:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8002ee2:	f041 0102 	orr.w	r1, r1, #2
 8002ee6:	6119      	str	r1, [r3, #16]
 8002ee8:	2100      	movs	r1, #0
 8002eea:	6119      	str	r1, [r3, #16]
 8002eec:	2370      	movs	r3, #112	; 0x70
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_ICU_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      icup->clock = STM32_TIM3CLK;
#else
     icup->clock = STM32_TIMCLK1;
 8002eee:	f44f 5158 	mov.w	r1, #13824	; 0x3600
 8002ef2:	f880 331d 	strb.w	r3, [r0, #797]	; 0x31d
 8002ef6:	f2c0 116e 	movt	r1, #366	; 0x16e
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002efa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002efe:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002f02:	6003      	str	r3, [r0, #0]
 8002f04:	68d3      	ldr	r3, [r2, #12]
 8002f06:	6091      	str	r1, [r2, #8]
 8002f08:	e5b0      	b.n	8002a6c <main+0x56c>
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;

    if (icup->config->channel == ICU_CHANNEL_1) {
      /* Enabling periodic callback on CC1.*/
      dier |= STM32_TIM_DIER_CC1IE;
 8002f0a:	f043 0302 	orr.w	r3, r3, #2
 8002f0e:	e628      	b.n	8002b62 <main+0x662>
